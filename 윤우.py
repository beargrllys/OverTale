#-*- coding: utf-8 -*-
# UTF-8 encoding when using korean
import datetime , time
import random
from datetime import timedelta

class tools:
    def get_ox(message):
            response = input(message).lower()
            while not (response == 'o' or response == 'x'):
                response = input(message).lower()
            return response == 'o'

    def loading():
        for i in range(1, 5):
            for k in ['/', '-', '\\', '|']:
                print('\r' + '.' * i + '%s' % k, end='')
                time.sleep(0.3)

    def dotdotdot():
        for k in range(5):
            print('\r' + '.' * k,end='')
            time.sleep(0.5)

    def after_few_seconds():
        time.sleep(1)
        for k in range(10, 0, -1):
            print("\r[%d초 후에 문제가 출력됩니다.]" % k, end='')
            time.sleep(1)
        print("\r[풀기 시작!]")

    def get_player_info():
        print('\n[플레이어 정보를 입력받습니다.]')
        name = input("▷ 당신의 이름은 무엇입니까?:")
        while name == '하냥이' or name == 'HaNyanE':
            print('(- ω -): 그건 내 이름이야. 다른 걸로 하라구.')
            name = input("▷ 당신의 이름은 무엇입니까?:")
        sex = input("▷ 당신의 성별은 무엇입니까?(남/여)")
        while not (sex == '남' or sex == '여'):
            sex = input("▷ 당신의 성별은 무엇입니까?(남/여)")
        print("[입력받은 정보를 확인합니다.]\n▶ 이름 :",name,"\n▶ 성별:",sex)
        if not tools.get_ox('▷ 계속 하시겠습니까?(o/x)'):
            return name,sex,'NO'
        else:
            return name,sex,"Yes"

    def print2(message):
        output_message = message.split("/")
        for i in range(len(output_message)):
            if i == 0:
                print(output_message[0], end="")
            else:
                _ = input(" ▽")
                print(output_message[i], end="")
        _ = input(" ▽")

class AA:
    def CalcalusAA():
        print("=" * 90)
        print("=" * 90)
        print("""
                           ☐☐                 ☐☐      ☐☐    ☐☐
                ☐☐☐☐☐☐☐☐   ☐☐      ☐☐☐☐☐☐☐☐   ☐☐      ☐☐☐☐☐☐☐☐         
                ☐☐    ☐☐   ☐☐         ☐☐    ☐☐☐☐      ☐☐    ☐☐      _________   
                ☐☐    ☐☐   ☐☐       ☐☐  ☐☐    ☐☐      ☐☐☐☐☐☐☐☐     |∫sin⁻¹𝒙d𝒙| Λ＿＿Λ
                ☐☐    ☐☐   ☐☐      ☐☐    ☐☐   ☐☐    ☐☐☐☐☐☐☐☐☐☐☐☐   |_________|(- ω -) 
                ☐☐☐☐☐☐☐☐   ☐☐         ☐☐☐☐☐☐☐ ☐☐         ☐☐    　            ＼/     \\
                           ☐☐              ☐☐        ☐☐                        |   |
                                           ☐☐        ☐☐☐☐☐☐☐☐☐☐                しへ J
                    """)
        print("=" * 90)
        print("=" * 90)

    def PythonAA():
        print("=" * 90)
        print("=" * 90)
        print("""
                ☐☐☐☐☐☐☐                   
                ☐☐    ☐☐               ☐☐     ☐☐
                ☐☐☐☐☐☐☐   ☐☐     ☐☐  ☐☐☐☐☐☐   ☐☐                               Λ___Λ
                ☐☐         ☐☐  ☐☐      ☐☐     ☐☐                              (= ω =)  ㅂㄷㅂㄷ......
                ☐☐           ☐☐        ☐☐     ☐☐☐☐☐☐    ☐☐☐☐☐   ☐☐☐☐☐☐      ＿(_つ/￣￣￣/＿
                ☐☐          ☐☐         ☐☐     ☐☐   ☐☐  ☐☐   ☐☐  ☐☐   ☐☐        \\/＿＿＿/
                ☐☐        ☐☐           ☐☐     ☐☐   ☐☐   ☐☐☐☐☐   ☐☐   ☐☐
                         ☐☐
                   """)
        print("=" * 90)
        print("=" * 90)

    def PhysicsAA():
        print('=' * 90)
        print('=' * 90)
        print("""
                  ☐☐☐☐☐☐☐☐                  ☐☐         ☐☐      ☐☐          |       
                  ☐☐    ☐☐        ☐☐☐☐☐☐☐☐  ☐☐      ☐☐☐☐☐☐☐☐   ☐☐       !! | へ       
                  ☐☐☐☐☐☐☐☐              ☐☐  ☐☐        ☐☐☐☐     ☐☐☐☐      Λ___Λ  \\
                ☐☐☐☐☐☐☐☐☐☐☐☐      ☐☐☐☐☐☐☐☐  ☐☐       ☐☐  ☐☐    ☐☐       (- ω -) 🍎 
                     ☐☐           ☐☐        ☐☐        ☐☐☐☐     ☐☐       ⟨     ⟩    
                  ☐☐☐☐☐☐☐☐        ☐☐☐☐☐☐☐☐  ☐☐          ☐☐☐☐☐☐ ☐☐        | | |
                  ☐☐☐☐☐☐☐☐                  ☐☐              ☐☐           (_|_)
                  ☐☐☐☐☐☐☐☐                                  ☐☐           
              """)
        print('=' * 90)
        print('=' * 90)

    def LPnLAA():
        print('=' * 90)
        print('=' * 90)
        print("""
                  ☐☐                        ☐☐         ☐☐      ☐☐                 
                  ☐☐              ☐☐☐☐☐☐☐☐  ☐☐      ☐☐☐☐☐☐☐☐   ☐☐       <논리 甲>   
                  ☐☐☐☐☐☐☐☐              ☐☐  ☐☐        ☐☐☐☐     ☐☐☐☐      Λ___Λ   
                     ☐☐           ☐☐☐☐☐☐☐☐  ☐☐       ☐☐  ☐☐    ☐☐       (- ω -)
                ☐☐☐☐☐☐☐☐☐☐☐☐      ☐☐        ☐☐        ☐☐☐☐     ☐☐       (     )
                  ☐☐              ☐☐☐☐☐☐☐☐  ☐☐          ☐☐☐☐☐☐ ☐☐        | | | 
                  ☐☐                        ☐☐              ☐☐           (_|_) 
                  ☐☐☐☐☐☐☐☐                                  ☐☐            
              """)
        print('=' * 90)
        print('=' * 90)

    def BaseballAA():
        print('=' * 90)
        print('=' * 90)
        print("""
            ☐☐☐☐☐☐                                                 
            ☐☐    ☐☐                           ☐☐                ☐☐  ☐☐                 
            ☐☐    ☐☐                           ☐☐                ☐☐  ☐☐       Λ___Λ      (((⚾
            ☐☐☐☐☐☐     ☐☐☐☐     ☐☐☐☐    ☐☐☐☐   ☐☐       ☐☐☐☐     ☐☐  ☐☐      (- ω -)つ
            ☐☐    ☐☐  ☐☐  ☐☐   ☐☐__    ☐☐__☐☐  ☐☐☐☐☐   ☐☐  ☐☐    ☐☐  ☐☐     と     /
            ☐☐    ☐☐  ☐☐  ☐☐☐      ☐☐  ☐☐      ☐☐  ☐☐  ☐☐  ☐☐☐   ☐☐  ☐☐      ゝ   |
            ☐☐☐☐☐☐     ☐☐☐☐ ☐☐  ☐☐☐☐    ☐☐☐☐   ☐☐☐☐☐    ☐☐☐☐ ☐☐  ☐☐  ☐☐      と_︿_J
              """)
        print('=' * 90)
        print('=' * 90)
    def Dark():
        print("""
            ::::::::::::::::::::::::::::::::::::||:::::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::::/__\\::::::::::::::::::::::::::::::::::::::
            ::::::::::::::::::::::::::::::::::::︶:::::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
            ⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻
        """)
    def HaNyanE():
        print("""
            ::::::::::::::::::::::::::::::::::::||:::::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::::/__\\::::::::::::::::::::::::::::::::::::::
            ::::::::::::::::::::::::::::::::::/ ︶ \\:::::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::::/      \\::::(딸깍):::::::::::::::::::::::::::
            ::::::::::::::::::::::::::::::::/        \\:::::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::::/   Λ___Λ  \\::::::::::::::::::::::::::::::::::
            ::::::::::::::::::::::::::::::/   (- ω -)  \\:::::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::::/    ⟨     ⟩   \\::::::::::::::::::::::::::::::::
            ::::::::::::::::::::::::::::/      | | |     \\:::::::::::::::::::::::::::::::
            :::::::::::::::::::::::::::/       (_|_)      \\::::::::::::::::::::::::::::::
            ⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻⁻
            """)
    def Mainpage():
        print("""
        ::::::::::::::::::::::::::::::::::::::::/\\:::::::::::::::::::::::::::::::::::::::::
        :::::::::::::::::::::::::::::::::::::::/  \\::::::::::::::::::::::::::::::::::::::::
        ::::::::::::::::::::::::::::::::::::::/    \\:::::::::::::::::::::::::::::::::::::::
        :::::::::::::::::::::::::::::::::::::/      \\::::::::::::::::::::::::::::::::::::::
        ::::::::::::::::::::::::::::::::::::/        \\:::::::::::::::::::::::::::::::::::::
        :::::::::::::::::::::::::::::::::::/          \\::::::::::::::::::::::::::::::::::::
        ::::::::::::::::::::::::::::::::::/            \\:::::::::::::::::::::::::::::::::::
        :::::::::::::::::::::::::::::::::/              \\::::::::::::::::::::::::::::::::::
        ::::::::::::::::::::::::::::::::/                \\:::::::::::::::::::::::::::::::::
        :::::::::::::::::::::::::::::::/                  \\::::::::::::::::::::::::::::::::
        ::::::::::::::::::::::::: ------------------------------:::::::::::::::::::::::::::
        ::::::::::::::::::::::::: ▒▒▒▒▒▒         ▒▒▒▒▒▒      ▒  :::::::::::::::::::::::::::
        :::::::::::::::::::::::::     ▒▒         ▒▒         ▒▒▒  ::::::::::::::::::::::::::
        ::::::::::::::::::::::::    ▒▒           ▒▒        ▒▒ ▒▒  :::::::::::::::::::::::::
        :::::::::::::::::::::::  ▒▒▒▒▒▒▒▒  ▒▒▒   ▒▒▒▒▒▒   ▒▒   ▒▒  ::::::::::::::::::::::::
        ::::::::::::::::::::::::   ▒▒▒▒        ▒▒▒▒▒▒▒▒▒▒           :::::::::::::::::::::::
        ::::::::::::::::::::::::  ▒▒  ▒▒         ▒▒  ▒▒ ▒▒▒▒▒▒▒▒▒▒▒  ::::::::::::::::::::::
        :::::::::::::::::::::::::  ▒▒▒▒          ▒▒  ▒▒              ::::::::::::::::::::::
        ::::::::::::::::::::____________________________________________::::::::::::::::::::
        ::::::::::::::::::::::/                                     \\::::::::::::::::::::::
        :::::::::::::::::::::/                                       \\:::::::::::::::::::::
        ::::::::::::::::::::/     ▒▒▒▒▒        ▒▒▒▒           ▒▒      \\::::::::::::::::::::
        :::::::::::::::::::/     ▒▒   ▒▒      ▒▒  ▒▒        ▒▒▒▒       \\:::::::::::::::::::
        ::::::::::::::::::/      ▒▒   ▒▒      ▒▒  ▒▒          ▒▒        \\::::::::::::::::::
        :::::::::::::::::/       ▒▒   ▒▒       ▒▒▒▒           ▒▒         \\:::::::::::::::::
        ::::::::::::::::/        ▒▒   ▒▒      ▒▒  ▒▒ ▒▒       ▒▒          \\::::::::::::::::
        :::::::::::::::/         ▒▒   ▒▒      ▒▒   ▒▒         ▒▒           \\:::::::::::::::
        ::::::::::::::/           ▒▒▒▒▒        ▒▒▒▒▒ ▒▒      ▒▒▒▒           \\::::::::::::::
        :::::::::::::/                                                       \\:::::::::::::
        ::::::::::::/                                                         \\::::::::::::
        :::::::::::/           ~~ Make & Simulate your Student! ~~             \\:::::::::::
        ::::::::::/                       PRESS ANY KEY                         \\::::::::::
        :::::::::-----------------------------------------------------------------:::::::::
                            made by YunU Kim  Kyungbin Cho  Angie Kim
        """)
    def end(self):
        print('=' * 90)
        print('=' * 90)
        print("""
                             ▒▒▒▒▒▒▒▒▒▒    ▒▒▒▒     ▒▒▒    ▒▒▒▒▒▒▒▒
                             ▒▒▒           ▒▒▒▒▒    ▒▒▒    ▒▒▒   ▒▒▒
                             ▒▒▒           ▒▒▒ ▒▒▒  ▒▒▒    ▒▒▒     ▒▒▒
                             ▒▒▒▒▒▒▒▒▒▒    ▒▒▒  ▒▒▒ ▒▒▒    ▒▒▒     ▒▒▒
                             ▒▒▒           ▒▒▒   ▒▒ ▒▒▒    ▒▒▒     ▒▒▒
                             ▒▒▒           ▒▒▒    ▒▒▒▒▒    ▒▒▒    ▒▒▒
                             ▒▒▒▒▒▒▒▒▒▒    ▒▒▒     ▒▒▒▒    ▒▒▒▒▒▒▒▒
        """)
        print('=' * 90)
        print('=' * 90)


class QandAs(object):
    def return_question(self,lecture):
        if lecture == 'cal':
            return {"arcsin(0) = ?": "0",
                    "f(x) = arctan(x),f'(1) = ?": "0.5",
                    "(1+3*√2-4/sin(0.3𝛑))*0-3 = ?": "-3",
                    "lim(x→∞) (1+1/x)ˣ=?": "e",
                    "tan𝜓 = x/r'\nx 자리에 들어가야 할 문자는?": "r",
                    "x = 3sin𝞱, y = 3cos𝞱, x²+y² = ?":"9",
                    "tan𝞥𝒑 = |(tan𝜓₁_tan𝜓₂)/(1+tan𝜓₁tan𝜓₂)|\n_ 자리에 들어갈 수학 기호는?": '-',
                    "𝞳 = |y\"|/(1+(y')ˣ)ʸ, x+y = ?":"3.5",
                    "𝞳 = |f(r)|/(r²+r'²)^(3/2), f(r) = ?\n\
1) r'²+2r²-rr\" 2) r²+2r\"²-rr' 3) r²+2r'²-rr\"":"3",
                    "√a²-u² 형태일 때 u = a____x로 쌍곡 치환한다.\n빈칸을 채워라":"tanh",
                    "∫1/(1+x²)dx = ___⁻¹x + C\n_____을 채워라":"tan",
                    "𝞹/2-∫(0 to 1)(sin⁻¹x)dx = ?":"1"}
        elif lecture == 'py':
            return {">>>____('Hello, world!')\nHellow, world!\n빈칸을 채워라!":"print",
                    ">>>(1+__)**2\n16\n빈칸을 채워라!":"3",
                    ">>>5//2\n___\n빈칸을 채워라!":"2",
                    ">>>print('print(\"print\")')\n____________\n빈칸에 들어갈 결과를 선택해라!\n\
1) 에러 2) ‘print(\"print\")’ 3) print(\"print\") 4) print":"3",
                    ">>>a = input('Enter your name.: ')\nEnter your name: Yunu\n>>>type(a)\n<class '___'>\n\
빈칸에 들어갈 결과를 선택하라! 1)found  2)str  3)int  4)None":'2',
                    "다음 중 실행 시 에러가 발생하는 코드는?\n\
>>>\"one\"+'2' ....(1)\n>>>'3'+2  ....(2)\n>>>4-5  ....(3)":'2',
                    ">>>'1'+'2'\n______\n빈칸을 채워라!":"'12'",
                    ">>>x = 7\n>>>print('x+3')\n___\n빈칸을 채워라!":"'x+3'"}
        elif lecture == 'phy':
            return {'[km/s] = MˣTʸLᶻ, x-y+z = ?':'0',
                    '어떤 물체의 길이가 1.38*10²cm로 측정되었다.\n유효숫자의 갯수를 구하라!':'3',
                    '속력은 크기를 갖는 스칼라량이며 속도는 방향과 크기를 갖는 ____이다.\n____에 들어갈 말을 적으라!':'벡터량',
                    '질량이 1kg인 물체를 20m 상공에서 낙하하였다. 지상에 도달하는데 몇 초가 걸리는가?\n\
(중력 가속도는 10m/s²이며 공기 저항 등의 다른 요소는 무시한다)':'2',
                    '벡터 F₁ = (1,0,0), F₂ = (0,1,0)에서 F₁ ⨉ F₂ = (a,b,c)\n(a+1)c-b=?':'2',
                    '포물체 운동에서 포물체의 y 방향 움직인 거리로 알맞은 것을 고르시오.\n\
1) y=𝓿₀²sin²𝞱/2g 2)y=𝓿₀²cos²𝞱/2g 3)y=𝓿₀²tan²𝞱/2g':'1',
                    '질량이 m이고 속도 𝓿, 반경 R로 등속 원운동 하는 물체의 운동방정식이다.\n\
벡터 F = k𝓿², k=?':'m/R',
                    'W = Fd____, 빈 칸을 알맞게 채우시오.\n1) sin𝞱 2) cos𝞱 3) tan𝞱':'2',
                    "'보존력만 작용하는 고립된 계에서, 운동에너지와 퍼텐셜에너지는 변할 수 있지만, 그 합인\n\
역학에너지 E는 변하지 않는다. 이를 '_______ 보존원리' 라 부른다. 빈 칸을 채워라":'역학에너지',
                    '임의의 입자계의 질량중심의 운동은 입자계에 대한 Newton의 제 2 법칙을 (만족한다/만족하지 않는다).\n\
알맞은 답을 선택하시오.':'만족한다',
                    "고립계 안에서 두 물체가 비탄성충돌을 하였을 경우 계 전체의 선운동량은 (보존된다/보존되지 않는다).\n\
알맞은 답을 선택하시오.":'보존된다',
                    "물체의 회전운동을 기술하는 회전변수는 '____, 각변위, 각속도/각가속도'이다.\n\
빈 칸을 채우시오.":'각위치',
                    '반경이 R, 질량이 M인 속이 꽉 찬 원통(원판)이 중심축을 회전축으로 회전할 때, 회전관성 I = aMR²\n a=?':"0.5",
                    '힘 F가 축에 대해 위치벡터 r 떨어진 점에 작용하는 토크의 크기는 다음과 같다.\n\
𝞽 = rF___𝟇, 빈 칸을 채워라!':'sin',
                    '다음 중 가장 높은 Young률을 가진 물체는 무엇인가?\n1) 유리 2) 고강도 콘크리트 3) 폴리스티텐':'1',
                    '다음 중 kepler의 법칙에 해당하지 않는 것을 고르시오.\n\
1) 행성의 궤도는 태양을 한 초점으로 하는 타원이다.\n2)태양과 행성을 연결한 선분이 시간당 지나간 넓이는 일정하다\n\
3) 모든 입자는 중력으로 다른 모든 입자를 잡아당긴다.\n4) 행성 주기의 제곱은 행성 궤도 장축의 세제곱에 비례한다':'3',
                    '다음 중 이상유체의 조건으로 알맞지 않은 것을 고르시오.\n1) 정상흐름 2) 비압축성 흐름 3) 막흐름 4) 비점성 흐름 5) 비회전 흐름':'3'}
        elif lecture == 'LPnL':
            return {'빈칸을 채우시오.\n 명제 논리 -> p________ logic':'ropositional',
                    '빈칸을 채우시오(띄어쓰기도 입력하시오).\n _______ -> first-order logic':'1차 논리',
                    '빈칸을 채우시오.\n구문 -> s______':'yntax',
                    '빈칸을 채우시오.\n논리적으로 타당한 주장 -> logically v____ arguments':'alid',
                    '다음 중 모순인 것은?\n1) a = a ∨ ¬(a = a)\n2) a = a\n3) a = a ∧ ¬(a = a)':'3',
                    '다음 논리와 의미가 같은 문장을 고르시오. ∀x(P(x) → Q(x))\n1) All P’s are Q’s.\n2) Some P’s are Q’s.\n3) No P’s are Q’s.\n4) Some P’s are not Q’s':'1',
                    '다음 논리와 의미가 같은 문장을 고르시오. ∃x(P(x) ∧ Q(x))\n1) All P’s are Q’s.\n2) Some P’s are Q’s.\n3) No P’s are Q’s.\n4) Some P’s are not Q’s':'2',
                    '다음 논리와 의미가 같은 문장을 고르시오. ¬∃x(P(x) ∧ Q(x))\n1) All P’s are Q’s.\n2) Some P’s are Q’s.\n3) No P’s are Q’s.\n4) Some P’s are not Q’s':'3',
                    '다음 논리와 의미가 같은 문장을 고르시오. ∃x(P(x) ∧ ¬Q(x))\n1) All P’s are Q’s.\n2) Some P’s are Q’s.\n3) No P’s are Q’s.\n4) Some P’s are not Q’s':'4',
                    "다음 중 'a=b,b=c ⊢ a=c'를 증명하는데 반드시 필요하지 않은 것은?\n1) =intro 2) =Elim 3) Reit":'3'}

class URstudent(QandAs, AA):
    def __init__(self,name,sex):
        self.name = name
        self.sex = sex
        self.cals = 0
        self.pys = 0
        self.phys = 0
        self.LPnLs = 0
        self.calGrade = []
        self.pyGrade = []
        self.phyGrade = []
        self.LPnLGrade = []
        self.calL = 0
        self.pyL = 0
        self.phyL = 0
        self.LPnLL = 0
        self.test_tool = {}
        self.bbL = 0
        self.selecting_tool = {}
        self.love = False
        self.class_ting_count = 0
        self.bangcoke = 0

    def solving(self, QandA, count):
        if count == 'None':
            questions = list(QandA.keys())
            which = random.choice(questions)
        elif count == 'first':
            self.test_tool.update(QandA)
            questions = list(self.test_tool.keys())
            which = random.choice(questions)
            del self.test_tool[which]
        elif count == 'second':
            questions = list(self.test_tool.keys())
            which = random.choice(questions)
            del self.test_tool[which]
        elif count == 'third':
            questions = list(self.test_tool.keys())
            which = random.choice(questions)
        print(which)
        start = time.time()
        answer = input("▷ 10초 안에 입력해주세요!:")
        timer = time.time() - start
        if not timer > 10:
           tools.loading()
           if answer == QandA[which]:
               print("\r[정답!]")
               return True
           else:
               print("\r[땡!]")
               print("▶ 정답: "+QandA[which])
               return False
        else:
            print("\r[시간초과!]")
            print("▶ 정답: " + QandA[which])
            return False

    def calcalus(self, count):
        if count == 'None' or count == 'first':
            AA.CalcalusAA()
            time.sleep(1)
            print("[다음에 출력되는 문제를 보고 알맞은 답을 입력해 주십시오.]\n▶ 분수의 경우 소수로 입력해 주세요.\n▶ 객관식의 경우 숫자만 입력해 주세요.")
            tools.after_few_seconds()
        calQandA = self.return_question('cal')
        self.check(calQandA, 'cal', count)

    def python(self,count):
        if count == 'None' or count == 'first':
            AA.PythonAA()
            time.sleep(1)
            print('[주어진 문제를 읽고 알맞은 답을 입력해 주십시오.]\n▶ 객관식의 경우 숫자만 입력해 주세요.')
            tools.after_few_seconds()
        pyQandA = self.return_question('py')
        self.check(pyQandA, 'py', count)

    def physics(self, count):
        if count == 'None' or count == 'first':
            AA.PhysicsAA()
            time.sleep(1)
            print("[다음에 출력되는 문제를 보고 알맞은 답을 입력해 주십시오.]\n▶ 분수의 경우 소수로 입력해 주세요.\n▶ 객관식의 경우 숫자만 입력해 주세요.")
            tools.after_few_seconds()
        phyQandA = self.return_question('phy')
        self.check(phyQandA, 'phy', count)

    def LPnL(self, count):
        if count == 'None' or count == 'first':
            AA.LPnLAA()
            time.sleep(1)
            print("[주어진 문제를 읽고 알맞은 답을 입력해 주십시오.]\n▶ 객관식의 경우 숫자만 입력해 주세요.")
            tools.after_few_seconds()
        LPnLQandA = self.return_question('LPnL')
        self.check(LPnLQandA, 'LPnL', count)

    def get_rest(self):
        tools.print2('(오늘은 좀 쉬어야겠다......)')
        what_game = input('1) 오늘은 야구가 땡긴다!\n2) 분홍빛 대학 생활을 즐기고 싶어!\n3) 그냥 집에 있자....\n▷ ')
        while what_game != '1' and what_game != '2' and what_game != '3':
            print('(그런건 없다.)')
            what_game = input('1) 야구 경기나 보러 갈까?\n2) 썸이 타고 싶다....\n3) 그냥 집에 있자....\n▷ ')
        if what_game == '1':
            self.baseball()
        elif what_game == '2':
            if self.class_ting_count <5:
                if self.love == False:
                    result = self.class_ting()
                    print('\n')
                    if result == 'Success':
                        tools.print2('(- ω -): 어이, 청춘~!/(- ω -): 어, 뭐야. 얼굴이 즐거워 보이네?/(- ω -): 분홍빛 대학 생활이야? 그런거야?/(...왠지 부끄럽다. 하지만 싫지는 않다!)/(행복한 기분으로 잠이 들었다.)')
                        self.love = True
                    elif result == 'Fail':
                        if self.class_ting_count <5:
                            tools.print2('(- ω -): 어이, 청춘~!/(- ω -): 분홍빛 대학 생활을 보내고 싶다며?/(......)/(왠지 창피하다...)/(다음을 기약하며 잠을 청했다.)')
                        else:
                            tools.print2(
                                '(- ω -): 어이, 청춘~!/(- ω -): 분홍빛 대학 생활을 보내고 싶다며?/(- ω -): 근데 이게 벌써 몇 번째야?/(......)/(다시는...)/(다시는 그런 데 안가!)')
                else:
                    tools.print2('(- ω -): 이미 즐기고 있잖아./(아 그렇지.)/(- ω -): 자랑질 그만 하고 잠이나 자!/(잠이나 잤다.)')
            else:
                tools.dotdotdot()
                tools.print2('[그러나 아무 일도 일어나지 않았다.]\n')
                tools.print2('(- ω -): 그런건 이제 없어. 알잖아?/(...끄덕)/(왠지 눈에서 땀이 난다.)/(......)/(아니, 진짜 땀이라니까?)')
        elif what_game == '3':
            tools.print2('오늘은 아무것도 하고 싶지 않다.')
            print('\n이미 아무것도 안하고 있지만.....\n')
            time.sleep(1)
            print('더욱 격렬히 아무것도 안 하고 싶다!!!!!')
            time.sleep(0.3)
            tools.print2('(- ω -): 잠이나 자!/(잠이나 잤다.)')
            self.bangcoke += 1


    def baseball(self):
        AA.BaseballAA()
        print('\n')
        a = random.randrange(0,5)
        b = random.choice(['00','01','02','10','11','12'])
        if a != 0:
            if a%2 == 1:
                tools.print2('(고척 스타디움으로 야구 직관을 갔다.)')
            else:
                tools.print2('(집에서 야구 중계를 보기로 했다.)')
            tools.dotdotdot()
            if b[0] == '0':
                if b[1]=='0':
                    tools.print2('"따악~"')
                    print('(크다!)')
                    time.sleep(0.7)
                    tools.print2('(넘어갔다!)\
                    /(아, 우리 수비 차례였다.)')
                elif b[1]=='1':
                    tools.print2('(...엄청난 경기였다.)\
                    /(도대체 한 이닝에 실책이 몇 개나 나오는 거지?)')
                else:
                    tools.print2('(불펜이 불을 질렀다.)\
                    /(덕아웃에서 선발의 표정이 썩어간다.)')
                tools.print2('\n(결국 졌다.....)')
            elif b[0] == '1':
                if b[1] == '0':
                    tools.print2('"따악~"')
                    print('(크다!)')
                    time.sleep(0.7)
                    tools.print2('(넘어갔다!)\
                    /(접전 승부 끝에 끝내기 홈런으로 이겼다. 기분이 좋다.)')
                if b[1] == '1':
                    tools.print2('(투수들이 이를 악물고 공을 던진다.)\
                    /(그런데 타자들이 공을 못 친다.)\
                    /\n(결국 비겼다.)')
                if b[1] == '2':
                    tools.print2('선수들의 열기에 경기장이 뜨거워진다.\
                    /아, 비가 온다.\
                    /\n(결국 우천 취소가 되었다. 어차피 지고 있었으니 상관 없나?)')
        else:
            tools.print2('(왠지 오늘은 중계만 보고 있기 싫다.)\
            /(학교 야구 동아리에 가서 한 게임 하기로 했다.)')
            def num_baseball():
                print('[이번 미니게임은 숫자 야구입니다.]')
                print('[1~8의 숫자 세 개의 나열을 맞추시면 됩니다.]')
                print('[제시한 숫자의 종류와 자릿수가 맞으면 스트라이크, 종류만 맞으면 볼입니다.]')
                print('[좋은 성적을 거두시기를 빕니다.]')
                r_num = ["0", "0", "0"]
                r_num[0] = str(random.randrange(1, 9, 1))
                r_num[1] = r_num[0]
                r_num[2] = r_num[0]
                while (r_num[0] == r_num[1]):
                    r_num[0] = str(random.randrange(1, 9, 1))
                while (r_num[0] == r_num[2] or r_num[1] == r_num[2]):
                    r_num[2] = str(random.randrange(1, 9, 1))
                sn = 0
                bn = 0
                tn = 0
                while (sn < 3):
                    a = str(input("▷ 1~8 중 세 개의 숫자를 띄어쓰기 없이 입력하세요.:"))
                    while not (len(a) == 3 and a[0] != a[1] != a[2]):
                        a = str(input("▷ 세 개의 다른 숫자를 입력해 주세요.:"))
                    sn = 0
                    bn = 0

                    for i in range(0, 3):
                        for k in range(0, 3):
                            if (a[i] == str(r_num[k]) and i == k):
                                sn = sn + 1
                            elif (a[i] == str(r_num[k]) and i != k):
                                bn = bn + 1

                    if (1 <= sn < 3) or (1 <= bn <= 3):
                        print("▶ Strike:[", sn, "], Ball:[", bn, "]")
                    elif (sn == 0) and (bn == 0):
                        print("▶ Out")
                    tn += 1
                    if (tn == 10):
                        tn = 'Lose'
                        break
                print('▶ 정답: '+str(r_num[0])+str(r_num[1]+str(r_num[2])))
                if tn == 'Lose':
                    tools.print2("(주변의 시선이 따갑다...)\n(앞으론 경기 구경이나 해야겠다.)")
                else:
                    if (1 <= tn <= 5):
                        tools.print2("(오늘은 왠지 몸이 가볍다! 혹시 나 재능 있는거 아니야?)\n(시합이 끝나고 신이나서 집으로 왔다.)")
                        self.bbL += 1.5
                    elif (6 <= tn <= 8):
                        tools.print2("(그럭저럭 괜찮은 경기였다. 가끔씩은 이런 것도 괜찮지.)\n(시합이 끝나고 집으로 돌아왔다.)")
                        if not self.bbL=='A':
                            self.bbL = 1
                    elif (8 < tn <= 9):
                        tools.print2("(컨디션이 좋지 않다...)/(시합이 끝나고 조용히 운동장을 빠져나왔다.)")
                        if not self.bbL == 'A' or self.bbL == 'B':
                            self.bbL = 0.5
            num_baseball()

    def class_ting(self):
        def input2(message, correct):
            a = input(message)
            while not a.isdigit():
                a = input2(message,correct)
            while not (int(a) in correct):
                a = input2(message,correct)
            return a
        print("(학부 단톡방을 열어 보았다.)")
        if self.sex == '남':
            print("[오늘 xx과랑 과팅하실 남자분 둘 구해요!]")
            tools.print2('[한 명 남았습니다!]')
            c = int(input2("과팅을 하시겠습니까?   1) Yes  2) No\n▷ ",[1,2]))
            if c == 1:
                tools.print2('(나는 빠르게 갠톡을 보냈다.)/(그리고 운명의 과팅 시간...)/(과팅 장소에는 다른 사람들이 먼저 와 있었다.)')
                partner = int(input("어느 여성의 앞에 앉겠습니까?    1) 지은  2) 수지\n▷ "))
                if partner == 1:
                    tools.print2(
                        '(나는 왼쪽 여성 분의 앞에 앉았다. 이름이 지은이라고 하셨지.)/'+self.name+': 안녕하세요~/지은: 안녕하세요../'+self.name+': 어, 어디 불편하세요?/지은: 아니요..ㅎㅎ 속이 좀 안좋아서 집에 가야할 것 같아요..')
                    ans1 = int(input2('1) 예? 갑자기 그런게 어디있어요...  2) 아프시면 병원에 가보셔야 하지 않을까요..?\n▷ ',[1,2]))
                    if ans1 == 1:
                        tools.print2(
                            self.name+': 예..? 갑자기 그런게 어디있어요.../지은: (기분 나쁜 표정으로)아니 제가 아프다는데.../(그녀가 자리를 박차고 일어났다....)/(아니 내가 뭘 어쨌다고?)/(시간이 지나서 집으로 돌아왔다.)')
                        self.class_ting_count += 1
                        return 'Fail'
                    elif ans1 == 2:
                        tools.print2(self.name+': 아프시면 병원에 가보셔야 하지 않을까요..?/지은: 아, 그렇게 까지는....')
                        ans2 = int(input2("1) 제가 데려다 드릴까요?  2) 그러면 그냥 집에 가셔도 돼요~\n▷ ",[1,2]))
                        if ans2 == 1:
                            tools.print2(self.name+': 제가 데려다 드릴까요?/지은: 아니요, 됐어요./(그렇게 그녀는 떠나버렸다....)/(이게 뭐야?)/(시간이 지나서 집으로 돌아왔다.)')
                            self.class_ting_count += 1
                            return 'Fail'
                        elif ans2 == 2:
                            tools.print2(
                                self.name+': 그러면 그냥 집에 가셔도 돼요~./지은: (잡지 않자 약간 당황하며)아..네.../(나는 여유있게 손을 흔들어줬다.)/(잠깐, 나 뭔가 실수한건가?)/(시간이 지나서 집으로 돌아왔다.)')
                            self.class_ting_count += 1
                            return 'Fail'
                elif partner == 2:
                    tools.print2(
                        '(나는 오른쪽 여성 분의 앞에 앉았다. 이름이 수지라고 하셨지.)/'+self.name+': 안녕하세요~./수지: 안녕하세요!/(한창 이야기를 나누던 도중 같이 과팅을 온 선배가 말을 걸었다.)/선배: 저기 미안한데, 수지가 맘에 들어서 말야... 파트너좀 바꿔주라 응?')
                    ans1 = int(input2(
                        "1) "+self.name+': 네!! 그럴게요! 안그래도 그러려던 참이었어요!(해맑)\n2) (수지에게 억울한 표정을 지으며 자리를 바꾼다.)\n3) '+self.name+': 죄송하지만 싫은데요.(단호)',[1,2,3]))
                    if ans1 == 1:
                        tools.print2(
                            self.name+': 네!! 그럴게요! 안그래도 그러려던 참이었어요!(해맑)/수지: (기분 나쁜 표정으로)아니 이게 무슨 상황이에요...?/선배: 아까 쟤가 더 싫대서 먼저 바꾸자 했어 ^^./'+self.name +': 아니 내가 언제..ㅇ..! 읍읍...!!!/수지: 됐어요, 저 먼저 갈께요.\
                            /(수지가 자리를 박차고 나갔다. 마음이 상한 모양이다.)')
                        ans2 = int(input2("1) 같이 뛰어나가 잡는다.\n2) 포기하고 그만 집으로 간다.\n▷ ",[1,2]))
                        if ans2 == 1:
                            tools.print2(
                                self.name+': 저기..!! 저기 잠깐만요..!/(수지가 뒤를 돌아봤다. 만회해야 해!)/'+self.name+': 아까는 제가 실수한 것 같아요..!!/수지: 실수는 무슨 실수... 어우, 짜증나 정말!/(가벼렸다...)/(시간이 지나서 집으로 돌아왔다.)')
                        elif ans2 == 2:
                            tools.print2('(...붇잡았어야 했나?)/(시간이 지나서 집으로 돌아왔다.)')
                    elif ans1 == 2:
                        tools.print2(
                                '(나는 수지의 눈을 맞추며 억울한 표정으로 자리를 바꿨다.)/수지: 저기, 잠깐만요!/선배1: 응..?/수지: 저는 저 남자분이랑 파트너 하고 싶은데요.')
                        ans3 = int(
                            input2("1) "+self.name+": (선배 눈치를 보며) 에이 선배 여기 앉으세요.... 하하.\n2) "+self.name+": 수지가 그렇다는데 제가 여기 앉을게요 선배..하하!",[1,2]))
                        if ans3 == 1:
                            tools.print2(
                                self.name + ': (선배 눈치를 보며)에이 선배 여기 앉으세요.... 하하./(수지의 표정이 굳어간다.)/수지: 전 그냥 집에 갈게요.../(...난 바보야!)/(시간이 지나서 집으로 돌아왔다.)')
                            self.class_ting_count += 1
                            return 'Fail'
                        elif ans3 == 2:
                            tools.print2(
                                self.name + ': 수지가 그렇다는데 제가 여기 앉을게요 선배...하하!/수지: 잘됐네요! 여기 다시 앉으세요 ㅎㅎ./선배: 그래? 그럼 어쩔 수 없지 ㅎㅎ.../(시간이 어느정도 지나자 우리는 술 게임을 시작했다.)')
                            tools.print2(
                                '수지: 바니,바... 아ㅎ앗,트ㅡ렷따아~!/선배: (복수하듯이)수지야 더마셔~ 더마셔~!/(이미 많이 마신 것 같은데... 괜찮나?)')
                            ans4 = int(input2("1) 선배의 손을 제지하고 그만 주라고 뭐라고 한다.\n2) 수지의 손을 잡고 밖으로 나간다.\n▷ ",[1,2]))
                            if ans4 == 1:
                                tools.print2(
                                    self.name + ': 선배님 수지 취한 것 같은데 그만 주시죠./수지: 으ㅎㅇㅇ아니얗 나 괜ㄹㅎㅇ찮......./선배: 수지가 괜찮다는데 왜그래~. 자, 아~.')
                                ans5 = int(input2('1) '+self.name + ': 에이 그만 주시라니까요~.\n2) 어쩔 수 없이 포기하고 먹는 모습을 지켜본다.\n▷ ',[1,2]))
                                if ans5 == 1:
                                    tools.print2(
                                        self.name + ': 에이 그만 주시라니까요~./(선배가 조심스레 나에게 다가와 귓속말을 한다.)/선배: 밖으로 좀 나와볼래?/(선배와 함께 밖으로 나왔다.)')
                                    tools.print2(
                                        '선배: 너 도대체 나한테 왜그러냐~./'+self.name+': 제가 뭘요~, 아 애가 취했으니까 그만 먹이자는 거였죠~./선배: 아~ 답답하네... 너 수지한테 관심있냐?')
                                    ans6 = int(input2("1) 아니요, 그런건 아니구요~. 그냥 예의상이죠.\n2) 네, 관심있습니다. 그러니까 그만해주세요.\n▷ ",[1,2]))
                                    if ans6 == 1:
                                        tools.print2(
                                            '(갑자기 수지가 나와서 상처받은 얼굴로 나를 쳐다본다. 다 듣고 있었나?)/수지: 예의상 그럴 필요 없어. 선배 이만 가요./'+self.name+': 안돼, 너 취했잖아./(수지는 내 말에 대꾸도 하지 않고 고개를 돌려버렸다.)')
                                        tools.print2(self.name + ': 잠깐만 기다려!/(그들은 떠나버렸다...)/(할 수 없이 집으로 돌아왔다.)')
                                        self.class_ting_count += 1
                                        return 'Fail'
                                    elif ans6 == 2:
                                        tools.print2(
                                            '(갑자기 수지가 나와서 선배와 나를 처다본다. 다 듣고 있었나?)/수지: 저 사실 취한 척 한거였어요. 덕분에 잘됐네요./선배: 뭐라고..?/'+self.name+': 너 정말 괜찮아?')
                                        tools.print2('수지: 응, 괜찮아. 가자 나 기숙사까지 데려다 줘./선배1: 잠깐만 기다려!/(나는 수지를 기숙사로 데려다 주고, 집으로 돌아왔다.)')
                                        return 'Success'
                                elif ans5 == 2:
                                    tools.print2(
                                        '(나는 무력히 수지가 선배가 따라주는 술을 먹는것을 바라봤다.)/선배: 한잔더 한잔더!/(수지가 앞에서 자꾸 정강이를 쿡쿡 찌른다. 실수한건가?!)')
                                    tools.print2("(취한 그들은 그대로 손을 잡고 나가버렸다....)/(할 수 없이 집으로 돌아왔다.)")
                                    self.class_ting_count += 1
                                    return 'Fail'
                            elif ans4 == 2:
                                tools.print2(
                                        '(나는 수지의 손을 잡고 밖으로 나갔다.)/'+self.name+': 괜찮아..?/(?!)/(갑자기 그녀가 손을 놓고 도망가버렸다!)/'+self.name+': 수지야..! 어디가..!/(뭐지... 그 보다 취했던 거 아니었나?)/(할 수 없이 집으로 돌아왔다.)')
                                self.class_ting_count += 1
                                return 'Fail'
                        elif ans1 == 3:
                            tools.print2(
                                self.name+': 죄송하지만 싫은데요. (단호)/선배: 뭐야 너? 잠깐 밖으로 나가서 얘기 좀 하자./(수지가 부담스럽지만 걱정스러운 표정으로 바라본다!)')
                            ans8 = int(input2('1) 수지야, 잠깐 나갔다 올게.(찡긋)\n2) 네, 잠깐 나가서 얘기 좀 하죠.\n3) 싫은데요?\n▷ '[1,2,3]))
                            if ans8 == 1:
                                tools.print2(
                                    self.name+': 수지야, 잠깐 나갔다 올게.(찡긋)/(?!)/(수지가 먹은것도 없이 갑자기 구토를 하기 시작했다!)/수지: 우엑에ㅔ에겡ㅇㄱ..../선배: 수지야 괜찮아????/(수지는 결국 구급차에 실려 갔다...)/(......)/(집으로 돌아왔다.)')
                                self.class_ting_count += 1
                                return 'Fail'
                            elif ans8 == 2:
                                tools.print2(
                                    self.name+': 네 잠깐 나가서 얘기 좀 하죠./선배: 너 도대체 나한테 왜그러냐~./'+self.name+': 제가 뭘요~, 아 애가 취했으니까 그만 먹이자는 거였죠~./선배: 아~ 답답하네... 너 수지한테 관심있냐?')
                                ans6 = int(input2("1) 아니요, 그런건 아니구요~. 그냥 예의상이죠.\n2) 네, 관심있습니다. 그러니까 그만해주세요.\n▷ ",[1,2]))
                                if ans6 == 1:
                                    tools.print2(
                                        '(갑자기 수지가 나와서 상처받은 얼굴로 나를 쳐다본다. 다 듣고 있었나?)/수지: 예의상 그럴 필요 없어. 선배 이만 가요./' + self.name + ': 안돼, 너 취했잖아./(수지는 내 말에 대꾸도 하지 않고 고개를 돌려버렸다.)')
                                    tools.print2(self.name + ': 잠깐만 기다려!/(그들은 떠나버렸다...)/(할 수 없이 집으로 돌아왔다.)')
                                    self.class_ting_count += 1
                                    return 'Fail'
                                elif ans6 == 2:
                                    tools.print2(
                                        '(갑자기 수지가 나와서 선배와 나를 처다본다. 다 듣고 있었나?)/수지: 저 사실 취한 척 한거였어요. 덕분에 잘됐네요./선배: 뭐라고..?/' + self.name + ': 너 정말 괜찮아?')
                                    tools.print2(
                                        '수지: 응, 괜찮아. 가자 나 기숙사까지 데려다 줘./선배1: 잠깐만 기다려!/(나는 수지를 기숙사로 데려다 주고, 집으로 돌아왔다.)')
                                    return 'Success'
            else:
                tools.print2('(아무래도 부담스럽다.....)/(그냥, 관두자.)')
                return 'Fail'
        elif self.sex == '여':
            print("[오늘 xx과랑 과팅하실 여자분 둘 구해요!]")
            tools.print2('[한 명 남았습니다!]')
            c = int(input2("과팅을 하시겠습니까?   1) Yes  2) No\n▷ ",[1,2]))
            if c == 1:
                tools.print2('(나는 빠르게 갠톡을 보냈다.)/(그리고 운명의 과팅 시간...)/(과팅 장소에는 다른 사람들이 먼저 와 있었다.)')
                partner = int(input2("어느 남성의 앞에 앉겠습니까?    1) 정국  2) 남준\n▷ ",[1,2]))
                if partner == 1:
                    tools.print2(
                        '(나는 왼쪽 남자 분의 앞에 앉았다. 이름이 정국이라고 하셨지.)/'+self.name+': 안녕하세요~/정국: 안녕하세요../'+self.name+': 어, 어디 불편하세요?/정국: 아니요..ㅎㅎ 속이 좀 안좋아서 집에 가야할 것 같아요..')
                    ans1 = int(input('1) 예? 갑자기 그런게 어디있어요...  2) 아프시면 병원에 가보셔야 하지 않을까요..?\n▷ '))
                    if ans1 == 1:
                        tools.print2(
                            self.name+': 예..? 갑자기 그런게 어디있어요.../정국: (기분 나쁜 표정으로)아니 제가 아프다는데 왜 그러십니까.../(그가 자리를 박차고 일어났다.)/(흥! 잘나셨어 정말!)/(시간이 지나서 집으로 돌아왔다.)')
                        self.class_ting_count += 1
                        return 'Fail'
                    elif ans1 == 2:
                        tools.print2(self.name+': 아프시면 병원에 가보셔야 하지 않을까요..?/정국: 아, 그렇게 까지는....')
                        ans2 = int(input("1) 제가 데려다 드릴까요?  2) 그러면 그냥 집에 가셔도 돼요~\n▷ "))
                        if ans2 == 1:
                            tools.print2(self.name+': 제가 데려다 드릴까요?/정국: 아니요, 됐어요./(그렇게 그는 떠나버렸다....)/(이 사람 뭐야?)/(시간이 지나서 집으로 돌아왔다.)')
                            return 'Fail'
                        elif ans2 == 2:
                            tools.print2(
                                self.name+': 그러면 그냥 집에 가셔도 돼요~./정국: 아..네...(급하게 돌아간다.)/(나는 여유있게 손을 흔들어줬다.)/(...괜찮아, 다음 번이 있잖아?)/(시간이 지나서 집으로 돌아왔다.)')
                            self.class_ting_count += 1
                            return 'Fail'
                elif partner == 2:
                    tools.print2(
                        '(나는 오른쪽 남자 분의 앞에 앉았다. 이름이 남준이라고 하셨지.)/'+self.name+': 안녕하세요~./남준: 네, 안녕하세요!/(한창 이야기를 나누던 도중 같이 과팅을 온 동기가 말을 걸었다.)/선배1: 저기 언니 미안한데요~, 남준오빠가 맘에 들어서 말인데... 파트너좀 바꿔주면 안되요?')
                    ans1 = int(input2(
                        "1) "+self.name+': 그래!! 안그래도 그러려던 참이었어!(해맑)\n2) (남준에게 억울한 눈빛을 보이며 자리를 바꾼다.)\n3) '+self.name+': 미안하지만 싫은데?(단호)',[1,2,3]))
                    if ans1 == 1:
                        tools.print2(
                            self.name+': 그래!! 안그래도 그러려던 참이었어!(해맑)/남준: (기분 나쁜 표정으로)아니 이게 무슨...?/동기: 아까 언니가 오빠 별로래서 먼저 바꾸자 했어요^^./'+self.name +': 아니 내가 언제..ㅇ..! 읍읍...!!!/남준: 됐습니다, 저 먼저 일어나겠습니다.\
                            /(남준이 자리를 박차고 나갔다. 자존심이 상했나 보다.)')
                        ans2 = int(input2("1) 같이 뛰어나가 잡는다.\n2) 포기하고 그만 집으로 간다.\n▷ ",[1,2]))
                        if ans2 == 1:
                            tools.print2(
                                self.name+': 저기..!! 저기 잠깐만요..!/(남준이 뒤를 돌아봤다.)/'+self.name+': 아까는 제가 실수한 것 같아요... 정말 죄송해요./남준: 아닙니다. 마음에 안 드실 수도 있죠. 그럼 전 이만.../(가벼렸다...)/(남자가 뭐 저리 속이 좁아!)/(시간이 지나서 집으로 돌아왔다.)')
                        elif ans2 == 2:
                            tools.print2('(가벼렸다...)/동기: 어머, 왜 날 봐요? 언니가 차 놓고?/(......)/(시간이 지나서 집으로 돌아왔다.)')
                    elif ans1 == 2:
                        tools.print2(
                                '(나는 남준에게 억울한 눈빛을 보내며 자리를 바꿨다.)/남준: 잠깐만요!/동기: 네..?/수지: 저는 이 여성분이랑 파트너 하고 싶습니다.')
                        ans3 = int(
                            input2("1) "+self.name+": (동기 눈치를 보며)에이 아니야. 난 괜찮으니까 네가 여기 앉아...\n2) "+self.name+": 저 분이 그러시다는데 그럼 내가 여기 앉을게...^^",[1,2]))
                        if ans3 == 1:
                            tools.print2(
                                self.name + ': (동기 눈치를 보며)에이 아니야. 난 괜찮으니까 네가 여기 앉아.../(남준의 표정이 굳어졌다.)/남준: 저, 죄송하지만 일이 생겨서 먼저 일어나 보겠습니다./(...난 바보야!)/(시간이 지나서 집으로 돌아왔다.)')
                            self.class_ting_count += 1
                            return 'Fail'
                        elif ans3 == 2:
                            tools.print2(
                                self.name + ': 저 분이 그러시다는데 그럼 내가 여기 앉을게...^^/남준: 아, 네 여기 앉으세요!/동기: 그래요? 그럼 어쩔 수 없지 ㅎㅎ.../(시간이 어느정도 지나자 우리는 술 게임을 시작했다.)')
                            tools.print2(
                                '동기: 빵~! 걸렸다~! 자 오빠 어서 잔 대세요~./남준: (한숨을 쉬며 잔을 건넨다.)/동기: (복수하듯이) 오빠 이번잔은 원샷이겠쬬? 반잔안돼요, 반잔안돼요!/(이미 많이 마신 것 같은데... 괜찮으려나?)')
                            ans4 = int(input2("1) 동기의 손을 제지하고 그만 주라고 뭐라고 한다.\n2) 남준의 손을 잡고 밖으로 나간다.\n▷ ",[1,2]))
                            if ans4 == 1:
                                tools.print2(
                                    self.name + ': 저기 남준이 취한 것 같은데 그만 줘./남준: 으..아니야, 나 괜찮은데.../동기: 오빠가 괜찮다는데 왜그래요~, 자 아~.')
                                ans5 = int(input2('1) '+self.name + ': 저기 잠깐 나가서 얘기좀 할래 동기야?.\n2) 어쩔 수 없이 포기하고 먹는 모습을 지켜본다.\n▷ ',[1,2]))
                                if ans5 == 1:
                                    tools.print2(
                                        self.name + ': 저기 잠깐 나가서 얘기좀 할래 동기야?./(동기가 옆구리를 찌르며 작은 소리로 말했다.)/동기: 언니, 이상하게 왜 그래요?/(동기와 함께 밖으로 나왔다.)')
                                    tools.print2(
                                         self.name + ': 남준이 너무 많이 먹이지는 말자~ 감당 어떻게 하려고 해~./' + self.name + ': 제가 뭘요~, 아 애가 취했으니까 그만 먹이자는 거였죠~./'+self.name + ': 그래도 쟤 통학이라잖아~ 술 너무 취하면 어떡해?'
                                        ' / 동기: 언니, 혹시 남준오빠한테 관심있어요..?')
                                    ans6 = int(input2("1) 아니, 그런건 아니구~ 그냥 술을 너무 먹이는건 안좋잖아.\n2) 응, 관심있어. 그러니까 그만해줘.\n▷ ",[1,2]))
                                    if ans6 == 1:
                                        tools.print2(
                                            '(다시 안으로 들어가자 남준의 표정이 이상하다. 혹시 다 들었나?)/남준: (상처받은 얼굴로).....')
                                        tools.print2('동기: 아, 이제 일어나야겠다. 오빠, 저 취한거 같은데 좀 바래다 주시면 안될까요?/남준: 그럴까? 집이 어디야?/'+self.name +': 저, 준이야! 너 통학이잖아!/(남준은 내 말에 대꾸도 하지 않고 자리에서 일어났다')
                                        tools.print2(self.name + ': 잠깐만 기다려!/(그들은 떠나버렸다...)/(할 수 없이 집으로 돌아왔다.)')
                                        self.class_ting_count += 1
                                        return 'Fail'
                                    elif ans6 == 2:
                                        tools.print2(
                                            '(갑자기 남준이 나와서 동기와 나를 처다본다. 다 듣고 있었나?)/남준: 나 사실 취한 척 한거였어. 덕분에 잘됐네./동기: 뭐라고요..?/' + self.name + ': 너 정말 괜찮아?')
                                        tools.print2(
                                            '남준: 응, 괜찮아. 저도 원래 관심있었거든요. 가자, 집까지 데려다 줄게./동기: 잠깐만, 이게 뭐야!/(나는 남준에게 배웅을 받으며 집까지 돌아왔다.)')
                                        return 'Success'
                                elif ans5 == 2:
                                    tools.print2(
                                        '(나는 무력히 남준이 동기가 따라주는 술을 먹는것을 바라봤다.)/동기: 쭉, 쭉 마셔요!')
                                    tools.print2('(남준이 갑자기 일어서더니 한숨을 쉬며 밖으로 나갔다.)/'+self.name + ': 어디가!/동기: 아, 가버렸네. 누구는 어떡해~?/(할 수 없이 집으로 돌아왔다.)')
                                    self.class_ting_count += 1
                                    return 'Fail'
                            elif ans4 == 2:
                                tools.print2(
                                        '(나는 남준의 손을 잡고 밖으로 나갔다.)/'+self.name+': 저기, 괜찮아..?/남준: 으...왜 이래 부담스럽게./'+self.name+': 야, 남준..! 어디가..!/(남준은 가버렸다.....)/(뭐야, 부담스럽다니! 어우 짜증나!)/(왠지 안에서 동기가 웃는 것 같다. 더 짜증나!)/(할 수 없이 집으로 돌아왔다.)')
                                self.class_ting_count += 1
                                return 'Fail'
                        elif ans1 == 3:
                            tools.print2(
                                self.name+': 미안하지만 싫은데.(단호)/동기: ...언니, 저랑 잠깐 얘기좀 해요./(남준이 부담스럽지만 걱정스러운 표정으로 바라본다!)')
                            ans8 = int(input2('1) 준아, 잠깐 나갔다 올게.(쪽)\n2) 그래, 잠깐 나가서 얘기 좀 하자.\n3) 싫은데?\n▷ ',[1,2,3]))
                            if ans8 == 1:
                                tools.print2(
                                    self.name+': 준아, 잠깐 나갔다 올게.(쪽)/(?!)/(남준이 먹은것도 없이 갑자기 구토를 하기 시작했다!)/남준: 우욱...우웨에에ㅔㅔㄱ/동기: 어머, 오빠 괜찮아요????/(남준은 결국 구급차에 실려 갔다...)/(......)/(집으로 돌아왔다.)')
                                self.class_ting_count += 1
                                return 'Fail'
                            elif ans8 == 2:
                                tools.print2(
                                    self.name+': 그래, 잠깐 나가서 얘기 좀 하자./동기: 언니, 오늘 저한테 왜그러세요?/'+self.name+': 응? 내가 뭘?/선배: 아, 답답해. 저 남준오빠한테 관심있다구요!')
                                ans6 = int(input2("1) 어머, 그래...? 그러면 잘되길 바랄게~.\n2) 그래..? 미안한데, 나도 걔 좋아해.\n▷ ",[1,2]))
                                if ans6 == 1:
                                    tools.print2(
                                        '(다시 안으로 들어가자 남준의 표정이 이상하다. 혹시 다 들었나?)/남준: (상처받은 얼굴로).....')
                                    tools.print2(
                                        '동기: 아, 이제 일어나야겠다. 오빠, 저 취한거 같은데 좀 바래다 주시면 안될까요?/남준: 그럴까? 집이 어디야?/' + self.name + ': 저, 준이야! 너 통학이잖아!/(남준은 내 말에 대꾸도 하지 않고 자리에서 일어났다')
                                    tools.print2(self.name + ': 잠깐만 기다려!/(그들은 떠나버렸다...)/(할 수 없이 집으로 돌아왔다.)')
                                    self.class_ting_count += 1
                                    return 'Fail'
                                elif ans6 == 2:
                                    tools.print2(
                                        '(갑자기 남준이 나와서 동기와 나를 처다본다. 다 듣고 있었나?)/남준: 나 사실 취한 척 한거였어. 덕분에 잘됐네./동기: 뭐라고요..?/' + self.name + ': 너 정말 괜찮아?')
                                    tools.print2(
                                        '남준: 응, 괜찮아. 저도 원래 관심있었거든요. 가자, 집까지 데려다 줄게./선배1: 잠깐만, 이게 뭐야!/(나는 남준에게 배웅을 받으며 집까지 돌아왔다.)')
                                    return 'Success'
            else:
                tools.print2('(아무래도 부담스럽다.....)/(그냥, 관두자.)')
                return 'Fail'

    def check(self,inQandA,lecture,count):
        if self.solving(inQandA,count) == True:
            if count == 'None':
                if lecture == 'cal':
                    self.cals += 1
                if lecture == 'py':
                    self.pys += 1
                if lecture == 'phy':
                    self.phys += 1
                if lecture == 'LPnL':
                    self.LPnLs += 1
            else:
                if lecture == 'cal':
                    self.calL += 1
                if lecture == 'py':
                    self.pyL += 1
                if lecture == 'phy':
                    self.phyL += 1
                if lecture == 'LPnL':
                    self.LPnLL += 1
        print('\n')

class Calender(URstudent):
    def __init__(self, name, sex):
        URstudent.__init__(self, name, sex)
        self.selected = {}
        self.__choice = {'1':"미분적분학", '2':"프로그래밍", '3':"일반물리학", '4':"논리학", '5':'휴식'}
        self.__date = ['수요일', '목요일', '금요일', '월요일', '화요일']
        self.day = datetime.date(2017, 3, 2)
        self.important_day = [datetime.date(2017, 4, 19),datetime.date(2017, 4, 26),datetime.date(2017, 5, 3),
                              datetime.date(2017, 5, 31),datetime.date(2017, 6, 7),datetime.date(2017, 6, 14),
                              datetime.date(2017, 6, 20)]

    def select_schedule(self):
        time.sleep(1)
        print('\n')
        print('<'+str(self.day)+'~'+str(self.day + timedelta(days=6))+'>')
        tools.print2('(이번 주의 일정을 정하자.)')
        choice = self.__choice
        date = self.__date
        if self.day in self.important_day:
            if self.day == datetime.date(2017, 4, 19):
                print('[이번 주에는 시험이 있습니다.]')
                tools.print2('▶ 4/21 - 논리학, 4/25 - 미분적분학')
                choice = {'1':"미분적분학", '2':"프로그래밍", '3':"일반물리학", '4':"논리학", '5':'휴식', '6':'시험'}
                date = ['수요일', '목요일', '금요일(시험)', '월요일', '화요일(시험)']
            elif self.day == datetime.date(2017, 4, 26):
                print('[이번 주에는 시험이 있습니다.]')
                tools.print2('▶ 4/26 - 프로그래밍, 4/27 - 일반물리학')
                choice = {'1':"미분적분학", '2':"프로그래밍", '3':"일반물리학", '4':"논리학", '5':'휴식', '6':'시험'}
                date = ['수요일(시험)', '목요일(시험)', '금요일', '월요일', '화요일']
            elif self.day == datetime.date(2017, 5, 3):
                print('[이번 주에는 쉬는 날이 있습니다.]')
                tools.print2('\n▶ 5/3 - 석가탄신일, 5/5 - 어린이날')
                date = ['수요일(휴일)', '목요일', '금요일(휴일)', '월요일', '화요일']
            elif self.day == datetime.date(2017, 5, 31):
                print('[이번 주에는 쉬는 날이 있습니다.]')
                tools.print2('\n▶ 6/6 - 현충일')
                date = ['수요일', '목요일', '금요일', '월요일', '화요일(휴일)']
            elif self.day == datetime.date(2017, 6, 7):
                print('[이번 주에는 시험이 있습니다.]')
                tools.print2('\n▶ 6/7 - 프로그래밍')
                choice = {'1': "미분적분학", '2': "프로그래밍", '3': "일반물리학", '4': "논리학", '5': '휴식', '6': '시험'}
            elif self.day == datetime.date(2017, 6, 14):
                print('[이번 주에는 시험이 있습니다.]')
                tools.print2('\n▶ 6/15 - 일반물리학, 6/16 - 논리학, 6/20 - 미분적분학')
                choice = {'1': "미분적분학", '2': "프로그래밍", '3': "일반물리학", '4': "논리학", '5': '휴식', '6': '시험'}
        print('[가능한 일정은 다음과 같습니다.]\n▶ ', choice)
        def selecting(choices):
            self.selecting_tool = {}
            print('\n')
            for k in date:
                schedule = menu.input2(self,"▷ %s의 일정을 결정해 주세요.:"%k)
                while not schedule in list(choices.keys()):
                    schedule = menu.input2(self,"▷ %s의 일정을 결정해 주세요.:" % k)
                if len(list(choices.values())) == 6:
                    if choices[schedule] == '시험':
                        if len(k)<4:
                            print('[이 날은 시험날이 아닙니다. 처음으로 돌아갑니다.]')
                            ask = 'No'
                            return '(- ω -): 조급해 하지 마.', ask
                    elif len(k)>=4:
                        if k[4] == '시' and choices[schedule] != '시험':
                            if not tools.get_ox('이 날은 시험 날입니다.계속하시겠습니까?(x를 선택하시면 처음으로 돌아갑니다)(o/x)'):
                                ask = 'No'
                                return '(- ω -): 시도는 해 봐야지.', ask
                        elif k[4] == '휴' and schedule != '휴식':
                            print('[휴일에는 수업이 없습니다. 처음으로 돌아갑니다.]')
                            ask = 'No'
                            return '(- ω -): 쉬는 날에는 좀 쉬어라', ask
                self.selecting_tool[k] = choices[schedule]
            print("[결정하신 스케줄은 다음과 같습니다.]")
            print('▶ '+str(self.selecting_tool))
            if not tools.get_ox('▷ 계속 진행하시겠습니까?(o/x)'):
                print('[처음으로 돌아갑니다.]')
                ask = 'No'
            else:
                ask = 'Yes'
            return self.selecting_tool, ask
        (selected, ask) = selecting(choice)
        while ask != 'Yes':
            (selected, ask) = selecting(choice)
        self.selected = selected
        print('\n')



    def run_schedule(self):
        selected = self.selected
        doing = list(selected.values())
        count = 0
        for k in doing:
            print('<'+str(self.day)+'>')
            if k == '미분적분학':
                self.calcalus('None')
            elif k == '프로그래밍':
                self.python('None')
            elif k == '일반물리학':
                self.physics('None')
            elif k == '논리학':
                self.LPnL('None')
            elif k == '휴식':
                self.get_rest()
            else:
                midNfin_exam.main(self)
            if count == 2:
                self.day += timedelta(days = 2)
            else:
                self.day += timedelta(days = 1)
            count += 1
        print('\n')

class midNfin_exam(Calender):
    def __init__(self, name, sex):
        Calender.__init__(self, name, sex)

    def exam_limit(self, lecture):
        if self.cals >= 5 and lecture == 'Cal':
            return True
        if self.pys >= 5 and lecture == 'Py':
            return True
        if self.phys >= 5 and lecture == 'Phy':
            return True
        if self.LPnLs >= 5 and lecture == 'LPnL':
            return True
        else:
            return False

    def exam(self,lecture):
        if lecture == 'Cal':
            self.calcalus('first')
            self.calcalus('second')
            self.calcalus('third')
            if self.calL == 3:
                self.calGrade.append('A')
            elif self.calL == 2:
                self.calGrade.append('B')
            elif self.calL == 1:
                self.calGrade.append('C')
            else:
                self.calGrade.append('D')
            self.calL = 0
        elif lecture == 'Py':
            self.python('first')
            self.python('second')
            self.python('third')
            if self.pyL == 3:
                self.pyGrade.append('A')
            elif self.pyL == 2:
                self.pyGrade.append('B')
            elif self.pyL == 1:
                self.pyGrade.append('C')
            else:
                self.pyGrade.append('D')
            self.pyL = 0
        elif lecture == 'Phy':
            self.physics('first')
            self.physics('second')
            self.physics('third')
            if self.phyL == 3:
                self.phyGrade.append('A')
            elif self.phyL == 2:
                self.phyGrade.append('B')
            elif self.phyL == 1:
                self.phyGrade.append('C')
            else:
                self.phyGrade.append('D')
            self.phyL = 0
        elif lecture == 'LPnL':
            self.LPnL('first')
            self.LPnL('second')
            self.LPnL('third')
            if self.LPnLL == 3:
                self.LPnLGrade.append('A')
            if self.LPnLL == 2:
                self.LPnLGrade.append('B')
            if self.LPnLL == 1:
                self.LPnLGrade.append('C')
            else:
                self.LPnLGrade.append('D')
            self.LPnLL = 0
        self.test_tool = {}

    def main(self):
        print('[오늘은 시험날입니다. 시험 방식은 평상시와 같습니다.]')
        print('[이전에 공부를 많이 하셨다면 "어, 어디서 많이 본 것 같은데" 하는게 나올 것입니다^^.]')
        tools.print2('(- ω -): 사실은 문제가 똑같거든.')
        print('[세 문제가 연달아서 제시 되니 타이밍을 놓지지 않도록 조심합시다.]')
        print('[건승을 빕니다.]')
        if (self.day == datetime.date(2017,4,25) or self.day == datetime.date(2017,6,20)):
            if self.exam_limit('Cal') is True:
                self.exam('Cal')
            else:
                time.sleep(1)
                tools.print2("(- ω -): ...그러나 이 말이 " + self.name + "에게 도움이 되는 일은 없었다.\
                /(- ω -): 미적분 강의를 다섯 번도 듣지 않은 " + self.name + "은(는) 이어지는 미적분 시험에서\
                /(- ω -): 모든 답에 '0'과 '1'을 적었고 거짓말 같이 'F'를 받고 말았다.")
                time.sleep(0.5)
                tools.print2("(- ω -): 뭐 다음번에는 더 성실해 보라고.")
                self.calGrade.append('F')
            self.cals = 0
        elif (self.day == datetime.date(2017,4,26) or self.day == datetime.date(2017,6,7)):
            if self.exam_limit('Py') is True:
                self.exam('Py')
            else:
                time.sleep(1)
                tools.print2("(- ω -): ...그러나 이 말이 " + self.name + " 에게 도움이 되는 일은 없었다.\
                /(- ω -): 프로그래밍 강의를 다섯 번도 듣지 않은 " + self.name + "은(는) 이어지는 시험에서\
                /(- ω -): 모든 코드에서 에러 메세지를 띄우며 거짓말 같이 'F'를 받고 말았다.")
                time.sleep(0.5)
                tools.print2("(- ω -): 뭐 다음번에는 더 성실해 보라고.")
                self.pyGrade.append('F')
            self.pys = 0
        elif (self.day == datetime.date(2017,4,27) or self.day == datetime.date(2017,6,15)):
            if self.exam_limit('Phy') is True:
                self.exam('Phy')
            else:
                time.sleep(1)
                tools.print2("(- ω -): ...그러나 이 말이" + self.name + "에게 도움이 되는 일은 없었다.\
                /(- ω -): 일반물리학 강의를 다섯 번도 듣지 않은 " + self.name + "은(는) 이어지는 일반물리학 시험에서\
                /(- ω -): 시험지에다 아무말 대 잔치를 벌이며 장렬히 산화했고 거짓말 같이 'F'를 받고 말았다.")
                time.sleep(0.5)
                tools.print2("(- ω -): 뭐 다음번에는 더 성실해 보라고.")
                self.phyGrade.append('F')
            self.phys = 0
        elif (self.day == datetime.date(2017,4,21) or self.day == datetime.date(2017,6,16)):
            if self.exam_limit('LPnL') is True:
                self.exam('LPnL')
            else:
                time.sleep(1)
                tools.print2("(- ω -): ...그러나 이 말이" + self.name + "에게 도움이 되는 일은 없었다.\
                /(- ω -): 논리학 강의를 다섯 번도 듣지 않은 " + self.name + '은(는) 이어지는 논리학 시험에서\
                /(- ω -): 세상이 깜짝 놀랄만한 논리를 펼처나갔고 그 결과 거짓말같이 'F'를 받고 말았다.')
                time.sleep(0.5)
                tools.print2('(- ω -): 뭐 다음번에는 더 성실해 보라고.')
                self.LPnLGrade.append('F')
            self.LPnLs = 0

class menu(midNfin_exam):
    def __init__(self,name,sex):
        midNfin_exam.__init__(self,name,sex)
        self.ending = [1,2,3,4,5,6,7,8,9,0]
    def input2(self,message):
        a = input(message)
        if a == 'menu' or a == 'master':
            if a == 'menu':
                self.menupage()
                print('[처음으로 돌아갑니다.]\n')
                return self.input2(message)
            elif a == 'master':
                password = input('▷ Password: ')
                if password == 'Nyan-Nyan':
                    self.custom_mode()
                else:
                    print('[Wrong password]')
                    print('[처음으로 돌아갑니다.]\n')
                return self.input2(message)
        return a
    def custom_mode(self):
        print('[custom_mode]')
        tools.print2('(- ω -): ...였지만 지금은 아니야./(- ω -): 다 쓰고 나서 폭파해버렸거든./(- ω -): 치팅을 하게 놔둘 수는 없지. 어서 돌아가.')

    def menupage(self):
        print('\n<Menu Page>')
        AA.Dark()
        time.sleep(1)
        AA.HaNyanE()
        time.sleep(1)
        print('(- ω -): 어서와!')
        answer = input('1) 스테이터스를 확인한다\n2) 도움말을 확인한다.\n3) 지금까지 확인한 엔딩을 살펴본다.\n4) 처음으로 돌아간다.\n▷ ')
        def statetus():
            print('<스테이터스>')
            if self.sex == '남':
                print('┌──────────────────────────┐')
                print('|　   　  ___________       |'+'  이름: '+self.name+ ' 성별: '+self.sex)
                print('|      /   ⌒　　  ⌒   \\ ♬ ~ |'+'  <수강 횟수>')
                print('| 　  /   （●） 　（●）  \\    |'+'  미분적분학: '+str(self.cals)+'회  프로그래밍: '+str(self.pys)+'회')
                print('|　  /:::::⌒(_人_)⌒:::::\\   |'+'  일반물리학: '+str(self.phys)+'회    논리학: '+str(self.LPnLs)+'회')
                print('| 　|　　　　 |r┬-|　　  　 |   |'+'  <학점>')
                print("|　  ＼ 　　  `ー'´ 　    /   |"+'  미분적분학: '+str(self.calGrade)+'  프로그래밍: '+str(self.pyGrade))
                print("└──────────────────────────┘"+'  일반물리학: '+str(self.phyGrade)+'    논리학: '+str(self.LPnLGrade))
                print("<주간 일정>")
                print(str(self.selecting_tool))
            elif self.sex == '여':
                print('┌────────────────────────────┐')
                print("|         -‐ '´￣￣｀ヽ､       |")
                print('|       ／　／" ｀ヽ ヽ　　＼     |'+'  이름: '+self.name+ ' 성별: '+self.sex)
                print("|    //, '/　　　　 ヽﾊ 　､　ヽ  |"+'  <수강 횟수>')
                print('|  〃 {_{　　　 　　　ﾘ| ｌ.│ i|  |'+'  미분적분학: '+str(self.cals)+'회  프로그래밍: '+str(self.pys)+'회')
                print('|  ﾚ!小ｌ ⌒　　　 ⌒  从　|、i|    |'+'  일반물리학: '+str(self.phys)+'회    논리학: '+str(self.LPnLs)+'회')
                print('|   ヽ|l　●　　　●　 | .|ﾉ│     |'+'  <학점>')
                print('|     |ﾍ⊃ ､_,､_,⊂⊃j  |　, |.  |'+'  미분적분학: '+str(self.calGrade)+'  프로그래밍: '+str(self.pyGrade))
                print('|     |　/⌒l,､ __,　イァト |/ | │'+'  미분적분학: '+str(self.calGrade)+'  프로그래밍: '+str(self.pyGrade))
                print('|     | /　 /::|三/::/／　 ヽ | |'+'  <주간 일정>')
                print('└────────────────────────────┘  '+str(self.selecting_tool))
        while not answer == '4':
            if answer == '1':
                statetus()
                answer = input('1) 스테이터스를 확인한다\n2) 도움말을 확인한다.\n3) 지금까지 확인한 엔딩을 살펴본다.\n4) 처음으로 돌아간다.\n▷ ')
            elif answer == '2':
                Help.main()
                answer = input('1) 스테이터스를 확인한다\n2) 도움말을 확인한다.\n3) 지금까지 확인한 엔딩을 살펴본다.\n4) 처음으로 돌아간다.\n▷ ')
            elif answer == '3':
                self.read_ending()
                answer = input('1) 스테이터스를 확인한다\n2) 도움말을 확인한다.\n3) 지금까지 확인한 엔딩을 살펴본다.\n4) 처음으로 돌아간다.\n▷ ')
            else:
                print('(- ω -): 그런건 없어.')
                answer = input('1) 스테이터스를 확인한다\n2) 도움말을 확인한다.\n3) 지금까지 확인한 엔딩을 살펴본다.\n4) 처음으로 돌아간다.\n▷ ')
    def ending_check(self):
        allGrade = self.calGrade + self.pyGrade +self.phyGrade + self.LPnLGrade
        if self.bbL >= 10 and allGrade.count('F')>=5:
            self.ending[0] ='[내일은 야구왕]'
            result = 1
        elif self.love == True and allGrade.count('F')>=3:
            self.ending[1] ='[인생의 승리자(?)]'
            result = 2
        elif self.bangcoke >= 30:
            self.ending[2] = '[인간의 욕망은 끝이 없고, 같은 실수를 반복한다.]'
            result = 3
        elif (self.pyGrade == ['A','B'] or self.pyGrade == ['B','A'] or self.pyGrade == ['B','B']) and allGrade.count('F')>=4:
            self.ending[3] = "[가게 이름은 'C_ARM_DOC_JAVA'!]"
            result = 4
        elif self.pyGrade == ['A','A'] and self.love == 'False':
            self.ending[4] ='[방 구석의 프로그래머]'
            result = 5
        elif self.LPnLGrade == '[A,A]' and self.love == True:
            self.ending[5] ='[내가 바로 제 2의 셜록!]'
            result = 6
        elif self.phyGrade == ['A','A'] and self.bangcoke >= 20:
            self.ending[6] ='[게으른 천재]'
            result = 7
        elif self.calGrade ==['A','A'] and self.love == False:
            self.ending[7] ='[대치동 1등 스터디 선배]'
            result = 8
        elif allGrade == ['A','A','A','A','A','A','A','A']:
            self.ending[8] ='[공부가 가장 쉬웠어요]'
            result = 9
        else:
            self.ending[9] ='[보통 사람들의 세상]'
            result = 0
        self.save_ending()
        self.run_ending(result)

    def save_ending(self):
        save = open('save_ending.txt','w')
        count = 1
        for k in self.ending:
            save.write(str(count))
            if not k.isdigit():
                save.write(k)
            save.write('\n')
            count += 1
        save.close()

    def read_ending(self):
        ending1 = ending2 = ending3 = ending4 = ending5 = ending6 = ending7 = ending8 = ending9 = ending0 = '[???????????????]'
        r = open('save_ending.txt','r')
        for k in [ending1,ending2,ending3,ending4,ending5,ending6,ending7,ending8,ending9,ending0]:
            a = r.readline()
            if len(a)>2:
                k = a[1:][:-1]
        print('(- ω -): 어떤 엔딩을 살펴볼래?')
        select = input('1) '+ending1+'\n2) '+ending2+'\n3) '+ending3+'\n4) '+ending4+'\n5) '+ending5+'\n6) '+ending6+'\n7) '+ending7+'\n8) '+ending8+'\n9) '+ending9+'\n0) '+ending0+'\n▷ ')
        if not (select == '1' or select == '2' or select == '3' or select == '4' or select == '5' or select == '6' or select == '7' or select == '8' or select == '9' or select == '0'):
            select = input(
                '1) ' + ending1 + '\n2) ' + ending2 + '\n3) ' + ending3 + '\n4) ' + ending4 + '\n5) ' + ending5 + '\n6) ' + ending6 + '\n7) ' + ending7 + '\n8) ' + ending8 + '\n9) ' + ending9 + '\n0) ' + ending0 + '\n▷ ')
        if select == '1':
            if ending1 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        elif select == '2':
            if ending2 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        elif select == '3':
            if ending3 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        elif select == '4':
            if ending4 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        elif select == '5':
            if ending5 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        elif select == '6':
            if ending6 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        elif select == '7':
            if ending7 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        elif select == '8':
            if ending8 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        elif select == '9':
            if ending9 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        elif select == '0':
            if ending0 == '[???????????????]':
                print('(- ω -): 아직 확인할 수 없어.')
            else:
                self.run_ending(int(select))
        print('\n')

    def run_ending(self,num):
        print('<2017-6-21>')
        AA.Dark()
        time.sleep(1)
        AA.HaNyanE()
        time.sleep(1)
        tools.print2('(- ω -): 흠, 6월 21일이군./(- ω -): 오늘이 무슨 날인지 기억해?/(- ω -): 오늘이 바로 네 나날의 결과를 확인하는 날이야.')
        print('\n')
        tools.print2('(- ω -): 넌 대학 생활을 보내면서 많은 일들을 겪었지./(- ω -): 그 수많은 일들은 앞으로 네 미래에 어떤 영향을 미치게 될까?')
        tools.print2('(- ω -): 자, 이제 한 번 말해봐./(- ω -): 너는 어떤 미래 속에서 살고 싶어?')
        print('\n')
        if num == 1:
            tools.print2('(이번에 주어졌던 몇 달의 시간...)/(그 시간을 보내고 나서야 나는 바로소 알 게 되었다.)/(내가 정말로 하고 싶었던 일이 무엇인지.)/'+self.name+'나는.../'+self.name+'나는.....!')
            print('\n')
            tools.print2(self.name+': 난 야구 선수가 되겠어!!\n(- ω -): ?!/'+self.name+': 사람들과 여러번 야구 시합을 하면서 깨달았어.'+self.name+': 내 능력은 야구에 있었던거야! 왜 이걸 여태까지 몰랐지?\n(- ω -): ......')
            tools.print2(self.name+': 생각해 보면 나한테 남은 길도 그것밖에 없잖아, 어때? 좋은 생각이지?/(- ω -): 솔직히 성적을 생각하면 그것 말고는 답이 없을지도.')
            tools.print2(self.name + ': 좋아, 그럼 여기서 이러고 있을 시간이 없어! 가서 연습해야지!/(- ω -): ...../(- ω -): 얘가 원래 이런 애였나...')
            tools.print2('(- ω -): 뭐 네가 그런 미래를 원한다면 말릴 순 없지.')
            tools.print2('\n[엔딩1: 내일은 야구왕]')
        elif num == 2:
            if self.sex == '남':
                abc = '수지'
            elif self.sex== '여':
                abc = '준이'
            tools.print2('(내 미래라...)/(......)/'+ self.name + ': 길게 생각해 볼 필요가 없을 것 같은데?/(- ω -): 오, 그래? 뭔데뭔데?')
            print('\n')
            tools.print2(self.name + ': 난 가정주부가 되서 우리 '+abc+'를 내조하면서 살 거야?/(- ω -): ...음? 뭐야 그걸로 만족 해?')
            tools.print2(self.name + ': 어. 사실 나는 우리'+abc+'만 곁에 있어준다면 다른건 다 상관 없거든./'+self.name+': 직장이고 뭐고 다 필요 없어!')
            tools.print2(self.name + ': 사랑하는 사람하고 함께 하는 삶!/'+self.name+': 이런게 진짜 인생의 승리자 아니야?')
            tools.print2('(- ω -): (우와아아....)/(- ω -): (뭔가 바보같지만, 바보 같으면서도...)/(- ω -): 아니, 그냥 바보같아. 다른 건 없어.')
            tools.print2('(- ω -): 뭐 네가 원하는 미래가 그거라면야....괜찮나?')
            tools.print2('\n[엔딩2: 인생의 승리자(?)]')
        elif num == 3:
            tools.print2('(...)/(.....)/(.......)/(- ω -): ...뭐라고 말 좀 해봐.')
            print('\n')
            tools.print2(self.name + ': 아, 몰라 귀찮아!! 그냥 잘래!/(- ω -): ?????/'+ self.name + ': 이렇게 대학 생활을 보내도 딱히 달라지는 것도 없고~')
            tools.print2(self.name + ': 점수는 안나오지~, 돈도 없지~, 무슨 미래가 있나?/(- ω -): ....../(- ω -): 그건 네가 맨날 농땡이나 피워서잖아...')
            tools.print2(self.name + ': 아, 시끄러워. 됐고 나 잔다. 깨우지 마./(- ω -):....../(- ω -): 이럴거면 왜 시간을 되돌리고 싶어 한 거야...')
            tools.print2('\n[엔딩3: 인간의 욕망은 끝이 없고, 같은 실수를 반복한다.]')
        elif num == 4:
            tools.print2('(앞으로의 미래라...)/(.....)/'+ self.name + ': 그거라면 생각해 둔 게 있어./(- ω -): 오, 계획을 세워 둔 거야?')
            print('\n')
            tools.print2(self.name + ': 치킨집을 차리자./(- ω -): ...치킨집이라고?/'+ self.name + ': 그래, 치킨집! 흔한 선택이긴 하지만 그만큼 수요도 많으니까 아주 실패하진 않을거야.')
            tools.print2('(- ω -): 아니, 내 말은 그게 아니라... 공부 배워놓은건 어쩌고?/(- ω -): 심지어 너 프로그래밍 학점 올 A잖아!/')
            tools.print2(self.name + ': 하지만 다른 과목들은 다 망했잖아. 그것만 가지곤 경쟁력이 없다고./'+ self.name + ': 아, 경쟁력 하니까 생각났는데 이건 어때?')
            tools.print2(self.name + ': 치킨을 팔면서 겸업으로 코딩도 하는거야!/'+ self.name + ': 이러면 다른 가게들보다 경쟁력이 생기겠지? 특히 공대생들에게?')
            tools.print2('(- ω -): 말도 안되는 소리 하지 마!/(- ω -): 아니, 그냥 니가 하고 싶은 대로 해...')
            tools.print2("\n[엔딩4: 가게 이름은 'C_ARM_DOC_JAVA'!]")
        elif num == 5:
            tools.print2('(.....)/(그 날로부터 몇 년이 지났다.)')
            tools.print2('(지금 나는...)/(유명한 앱 개발자가 되어서 이름을 날리고 있다.)/(지금 길 위를 걸어다니는 사람들이 들고다니는 스마트폰 안에는)')
            tools.print2('(내가 개발한 어플이 최소 한 개 이상 깔려 있다고 해도 과언이 아닐 정도이다.)/(물론 그것에서 나오는 수익이 상당한 양이기는 하지만)/(그 수익 때문에 내가 앱 개발을 계속하고 있는 것은 아니다.)')
            tools.print2('(다만 나는 이 방 구석에 앉아서 앱을 구상하고,)/(코딩하고, 디버깅하고, 런칭하고 하는 작업 그 자체가 즐거울 뿐이다.)/(따라서, 나는 행복하다.)')
            print('\n')
            tools.print2(self.name + ': 절때 연애를 못 한다거나 해서 불행하지 않다고.../(- ω -): 뜬금없이 무슨 소리야 그게./(- ω -): 그래서, 네가 원하는 미래는 뭐야? 말해봐!')
            tools.print2('\n[엔딩5: 방 구석의 프로그래머]')
        elif num == 6:
            tools.print2(self.name + ': ...지금 현재 나의 상황을 생각할 때, 내 미래에 대한 논리적인 결론은 하나야!/(- ω -): 오오, 논리적인 결론!')
            tools.print2(self.name + ': 탐정./(- ω -): ...네?/'+ self.name + ': 탐정이야!/'+ self.name + ': 나 같은 사람은 탐정이 되어야 해!/(- ω -): 오오오...')
            tools.print2(self.name + ': 생각해봐! 이 세상에는 조금만 생각하면 해결할 수 있는 문제들이 많은데 그걸 풀지 못하고 피해를 보는 사람들이 많다고./'+ self.name + ': 이전에만 해도 어쩌구 저쩌구.... 어때?')
            tools.print2('(- ω -): 논리적인지 아닌지는 둘째치고, 이건 확실하게 알았어./(- ω -): 너 드라마를 너무 많이 봤구나?')
            tools.print2('\n[엔딩6: 내가 바로 제 2의 셜록!]')
        elif num == 7:
            tools.print2(self.name + ': ...그냥 아무것도 안 하면 안될까?/(- ω -): 뭐라고?/'+ self.name + ': 그니까, 그냥 "백수"로 살면 안되냐고.')
            tools.print2('(- ω -): 아니, 그게 무슨 소리야, 백수라니?/'+ self.name + ': 직장을 굳이 가져야 하나? 지금 이대로도 살기 좋은데...')
            tools.print2('(- ω -): 얘가 갑자기 또 이상한 소리 하네./(- ω -): 그러면 앞으로 먹고 사는건 어쩌려고?/(- ω -): 또 예전처럼 알바나 하면서 살거야?')
            tools.print2(self.name + ': 그런건 걱정 안해도 돼. 자, 봐./(- ω -): 뭘 보라는건...?! 통장 잔고가 왜 이래?')
            tools.print2(self.name +': 너도 알지? 내가 대학을 그만둔 건 공부를 못해서가 아니라 당장 돈이 없어서였다니까?/'+ self.name + ': 다 방법이 있다구. 주식을 동향을 예측한다던가, 특허를 낸다던가.')
            tools.print2('(- ω -): (이녀석...)/(- ω -): (그 물리 성적이 헛 거는 아니었구나!)/'+ self.name + ': 그럼 난 들어가서 쉰다./(- ω -): 어,어. 그래.')
            print('\n')
            tools.print2('(- ω -): ...알다가도 모르겠군')
            tools.print2('\n[엔딩7: 게으른 천재]')
        elif num == 8:
            tools.print2(self.name + ': 미래에 대해서라면 확실한 계획을 세워뒀어./(- ω -): 오, 그래? 한 번 말해봐.')
            print('\n')
            tools.print2(self.name + ': 대치동에서 수학 전문 강사가 될꺼야./(- ω -): 음, 뭔가 구체적인데?')
            tools.print2(self.name + ': 내 강점인 수학을 가지고 우리 나라에서 먹고 살 수 있는 방법은 한정되어있어./'+ self.name + ': 그 중에서 가장 수익이 큰 직업이 학원 강사지.')
            tools.print2('(- ω -): 그럴 듯 하네. 그리고?/'+ self.name + ': 하지만 일반적인 보습학원 강사는 사실 안 하니만 못할거야./'+ self.name + ': 그러니까 노리는 건 대치동, 그리고 거기서의 탑!')
            tools.print2(self.name + ': 어때 괜찮지?/(- ω -): 좋네 좋아. 그대로 되면 더할 나위 없겠어./(- ω -): 그런데 너, 학원에서 누구 가르쳐 본 경험 있어?')
            tools.print2(self.name + ': 아니?/(- ω -): ...그럼 너 과외 선생님 해본 적 있어?/'+ self.name + ': 농담해? 대학 자퇴생한테는 사람들 과외 안 맞겨.')
            tools.print2('(- ω -): ...그럼 너, 스터디 그룹 같은 건 해본 적은 있어?/'+ self.name + ': ......')
            tools.print2('(- ω -): ....../(- ω -): 일단./(- ω -): 스터디나 과외 같은 것 부터 시작하자./'+ self.name + ': ...(끄덕)')
            tools.print2('\n[엔딩8: 대치동 1등 스터디 선배]')
        elif num == 9:
            tools.print2('(....)/(- ω -): 생각해보면 이 질문은 정말로 너에게 의미가 있네./(- ω -): 너 이번에 학교 생활 엄청 열심히 보냈잖아./(- ω -): 분명히 하고 싶은 것도 엄청 많겠지?')
            tools.print2('(........)/(- ω -): ...? 어디가?/'+ self.name + ': 공부하러 간다./(- ω -): 뭐? 하지만 오늘 종강인데?/'+ self.name + ': 그니까 빨리 공부해야지.')
            tools.print2(self.name + ': 이제 하루종일 공부 할 수 있다는 뜻이잖아?/(- ω -): 어? 내가 종강의 의미를 잘못 알고 있었나?/(- ω -): 그게 그런 의미였어?')
            tools.print2('(- ω -): 오히려 반대 의미 아니야? 하루종일 놀 수 있다고?/'+self.name + ': 그러는 건 시간낭비지./(- ω -): 무슨... 아니 그보다도./(- ω -): 네 미래는?')
            tools.print2('(- ω -): 그건 어떻게 되는거야? 말해주고 가!/'+self.name + ': ...끈임없이 학습하는 미래상?/(- ω -): ....../'+self.name + ': 그럼 난 도서관으로 간다.')
            print('\n')
            tools.print2('(- ω -): 가버렸다.../(- ω -): 저거 괜찮은 건가?')
            tools.print2('\n[엔딩9: 공부가 가장 쉬웠어요]')
        else:
            tools.print2('(....)/(........)/(- ω -): 잘 생각해 봤어?/(- ω -): 네 미래는 어떤 모습일 것 같아?')
            tools.print2(self.name + ': 잘...모르겠어./(- ω -): 으흠?')
            tools.print2(self.name + ': 지금의 내 모습으로 어떠한 미래를 특정한다는게 가능할까?/(- ω -): 무슨 뜻인지 설명 좀 해줄래?')
            tools.print2(self.name + ': 오늘까지의 내 생활을 돌아보면, 특별한 게 없었어.')
            tools.print2(self.name + ': 난 특별히 수업을 열심 히 들은 것도 아니었고,')
            tools.print2(self.name + ': 동아리 활동에 열정적이지도 않았어.')
            tools.print2(self.name + ': 특별이 연애를 했었던 것도 아니고,')
            tools.print2(self.name + ': 뭔가 사업 계획이 있는 것도 아니야.')
            tools.print2(self.name + ': 또 전반적으로 성실한 생활을 보내지도 않았어.')
            tools.print2(self.name + ': 뭐, 방구석에서 뒹굴대고만 있었던 것도 아니지만.')
            tools.print2(self.name + ': 특별하게 프로그래밍을 잘 하는 것도 아니고,')
            tools.print2(self.name + ': 특별히 논리적이라고 자부할 수도 없고,')
            tools.print2(self.name + ': 천재인 것도 아니면서,')
            tools.print2(self.name + ': 1등 강사가 되겠다는 야망을 가진 것도 아니야.')
            tools.print2(self.name + ': 나는... 그저 그런 보통 사람이야.')
            tools.print2('(- ω -): .../(- ω -): ..../(- ω -): ..뭐야 그런 얘기였어?/'+self.name + ': 그런 얘기라니!/'+self.name + ': 내가 얼마나...!')
            print('\n')
            tools.print2('(- ω -): 그냥 그러면 된 거야.'+self.name + ': 뭐?')
            tools.print2('(- ω -): 어이, 소시민!/(- ω -): 네가 말하는 사람들은 대체 어디의 누구야?/(- ω -): 완전 말도 안되는 사람들 뿐이잖아./(- ω -): 비현실적이라고!')
            tools.print2('(- ω -): 우리의 주변을 잘 둘러봐봐 '+self.name+'!/(- ω -): 우리는 그런 억지스러운 설정을 가진 사람들에 둘러쌓여서 살고 있는걸까?')
            tools.print2('(- ω -): 뭐, 그런 사람이 아예 없지는 않겠지./(- ω -): 하지만 대부분의 사람들은 너와 같아./(- ω -): normal하다고. 그렇지?')
            tools.print2('(- ω -): 그럼 모든 사람들이 미래도 없이 살아가고 있는걸까?/(- ω -): 아냐./(- ω -): 저기 서있는 경찰 아저씨도./(- ω -): 방금 지나간 회사원도.')
            tools.print2('(- ω -): 스타벅스에서 나오는 아가씨도./(- ω -): 환자 치료하는 의사도, 버스 운전 기사 아저씨도, 고시원의 고시생도.')
            tools.print2('(- ω -): 학교의 선생님도, 지하철의 역무원도, 환경 미화원 할아버지도, 공부하는 고등학생도, 책 쓰는 소설가도, 게임 만드는 프로그래머도,')
            tools.print2('(- ω -): 교회의 목사도, 대통령도, 국회의원도, 가게의 아저씨도, 종업원도, 편의점의 알바도, 너도, 나도 모두가 다!')
            print('\n')
            tools.print2('(- ω -): 우리 모두는 보통 사람들이니까./(- ω -): 특별한 사람들만의 미래는 없으니까 걱정하지 마.')
            print('\n')
            tools.print2('(- ω -): 뭐 나는 사람이 아니니까 엄밀히 말하면 제외지만.')
            tools.print2(self.name + ': ...고마워.')
            tools.print2('(- ω -): 당연한 말을 했을 뿐이야./(- ω -): 그럼 다시 한 번 물어볼까?')
            print('\n')
            tools.print2('(- ω -): 너는 어떤 미래 속에서 살고 싶어?')
            tools.print2('\n[트루 엔딩: 보통 사람들의 세상]')



class Help:
    def main():
        print('\n<도움말>')
        while True:
            print('(- ω -): 뭐든 물어보고 싶은게 있으면 물어봐.')
            question =input('1) 기본적인 내용에 대해서\n2) 일정 정하기에 대해서\n3) 일정의 진행에 대해서\n4) 엔딩에 대해서\n5) 그 외의 것에 대해서\n6) 이제 없어!\n▷ ')
            while not (question == '1' or question == '2' or question == '3' or question == '4' or question == '5' or question == '6'):
                print('\n(- ω -): 응, 뭐라고?')
                question = input('1) 기본적인 내용에 대해서\n2) 일정 정하기에 대해서\n3) 일정의 진행에 대해서\n4) 엔딩에 대해서\n5) 그 외의 것에 대해서\n6) 이제 없어!\n▷ ')
            if Help.Helps(question) == 'Done':
                break

    def Helps(number):
        print('\n')
        if number == '1':
            print('<기본적인 내용에 대해서>')
            tools.print2('(- ω -): 간단하게 이야기하자면./(- ω -): 넌 원래 살던 삶에서 벗어나고 싶어했어./(- ω -): 그리고 은연중에 이런 생각을 했지.')
            tools.print2('(- ω -): "내가 그 때 제대로 대학만 다녔었더라면..."하는 생각을 말이야./(- ω -): 그때 내가 짠 하고 나타나서 짠 하고 도와준거지.')
            tools.print2('(- ω -): ...뭔가 잘못 된거라도 있어?')
        elif number == '2':
            print('<일정 정하기에 대해서>')
            tools.print2('(- ω -): 말 그대로 너의 그 주 일정을 정하는 파트야. \
            /(- ω -): 그날 수요일부터 다음주 화요일까지, 주말을 제외한 5일의 일정을 정하지. \
            /(- ω -): 일반적으로 \'미분적분학\', \'프로그래밍\', \'일반물리학\', \'논리학\' 총 네 개의 과목들 중 하나를 수강할 수 있고. \
            /(- ω -): 오늘따라 공부하기가 싫다면 그냥 쉬어도 돼. 대학생이잖아. /(- ω -): 다만 매일을 그렇게 놀면서 보내면 시험날에는 좀 고생할? \
            /(- ω -): 왜 일정의 대부분이 공부나고? \
            /(- ω -): 어쩔 수 없잖아. 학생의 본분은 공부니까.')
        elif number == '3':
            print('<일정의 진행에 대해서>')
            tools.print2('(- ω -): 각 일정의 진행은.... \
            /(- ω -): 그냥 그때그때의 설명을 따라가면 돼! \
            /(- ω -): 좀 더 덧붙이자면 강의의 진행은 대부분 문제풀이니까 \
            /(- ω -): 열심히 해보라구, 그렇게 어렵지는 않을테니까.')
            time.sleep(1)
            tools.print2('(- ω -): ...뭐? 아니라구? 어렵다구?')
        elif number == '4':
            print('<엔딩에 대해서>')
            tools.print2('(- ω -): 한 학기동안 열심히 지내다 보면 엔딩을 볼 수 있을거야. \
            /(- ω -): 당연한 이야기지만 엔딩의 결과는 네 행동의 결과니까 받아들이라구. \
            /(- ω -): 엔딩을 보고 나면 그 엔딩은 엔딩 도감에 기록이 . \
            /(- ω -): 메뉴에서 확인할 수 있으니까 자주 들러줘.')
        elif number == '5':
            print('<그 외 것에 대해서>')
            print('(- ω -): 뭐든 물어보라고는 했지만... 이상한건 묻지 말아줘.')
            question = input('1) AA에 대해서\n2) 인트로 영상에 대해서\n3) 게임의 재미에 대해서\n4) 질문을 그만둔다.\n▷ ')
            while not(question == '1' or question == '2' or question =='3' or question=='4'):
                print('\n(- ω -): 대체 뭘 물어보려고 이리 뜸을 들여?')
                question = input('1) AA에 대해서\n2) 인트로 영상에 대해서\n3) 게임의 재미에 대해서\n4) 질문을 그만둔다.\n▷ ')
            if question == '1':
                print('\n<AA에 대해서>')
                tools.print2('(- ω -): 어, 응......\
                /(- ω -): 아스키 아트(AA) 말이지?\
                /(- ω -): 원래는 GUI 같은걸 이용해서 이미지를 띄우려고 했었는데.\
                /(- ω -): 어렵더라구. 시간도 없고 해서 포기했어.\
                /(- ω -): 이미지들은 대신에 AA로 대체했는데, 음 나쁘지 않아.\
                /(- ω -): ......\
                /(- ω -): 알아 네 원래 얼굴과는 많이 다르지? 어쩔 수 없었어.\
                /(- ω -): (작게)설마 그 정도로 인트로가 잘 나올 줄을 몰랐다니까.....\
                /(- ω -): 음? 아냐아냐. 못 들은 걸로 해.\
                /(- ω -): 그리고 게임을 하면서 AA가 좀 찌그러져서 나온다면,\
                /(- ω -): PyCharm을 이용해서 게임을 돌리도록 해.\
                /(- ω -): 일반 터미널의 폰트와 PyCharm의 폰트가 달라서 그런거니까.\
                /(- ω -): ......\
                /(- ω -): 그만 노려봐......')
            elif question == '2':
                print('\n<인트로 영상의 퀄리티에 대해서>')
                tools.print2('(- ω -): 어 그거, 잘 만들었지?\
                /(- ω -): 설마 그 정도로 잘 뽑힐 줄은 몰랐어.\
                /(- ω -): 게다가 시간도 별로 없었는데.\
                /(- ω -): ...뭐야, 어떤 영상을 말하는지 모르겠다고?\
                /(- ω -): 같이 zip 파일에 들어있던 영상 말이야, 꼭 보라고!.\
                /(- ω -): 원래는 걔도 게임에 함께 넣으려고 했지만 말이지....\
                /(- ω -): 언젠가 시간이 되면 넣어보려고, 지금은 아니야.')
            elif question == '3':
                print('\n<왜 이런 재미없는 게임을 만들었는지에 대해서>')
                tools.print2('(- ω -): ...재미가 없다고?\
                /(- ω -): ......')
                time.sleep(1)
                tools.print2('(- ω -): 나도 알아, 재미 없는거.\
                /(- ω -): 디버깅 하면서 여러번 돌릴때도 재미 없어서 죽는 줄 알았다니까.\
                /(- ω -): 그래서 마지막에는 인플레이 중에 각종 스테이터스를 바꿀 수 있는 기능까지 넣었다니까.\
                /(- ω -): 그게 뭐냐고? 알아서 뭐하게?\
                /(- ω -): 다만 하는 방법은 메뉴 들어가는 방법하고 비슷해.\
                /(- ω -): 알려주는건 여기까지.')
            elif question == '4':
                tools.print2('\n(그냥 관 두자...)\
                /(- ω -): 흠, 잘 생각했어.')
        elif number == '6':
            print('<질문을 그만둔다>')
            tools.print2('(- ω -): 알았어. 가봐.')
            return 'Done'
        print('\n')

def gamecode():
    AA.Mainpage()
    _ = input()
    time.sleep(1)
    AA.Dark()
    time.sleep(1)
    AA.HaNyanE()
    time.sleep(1)
    tools.print2('(- ω -): 안녕, 이제 정신이 좀 드니?\
    /(- ω -): 먼저 내 소개부터 해 볼까?\
    /(- ω -): 내 이름은 하냥이야!\
    /(- ω -): 이 게임에서 마스코트 역할을 하고 있지.\
    /(- ω -): 또한 너를 이 세계로 데려온 장본인이기도 하지.\
    /(- ω -): ...음, 생각해보니 난 아직 네 이름을 몰라.\
    /(- ω -): 네 이름 좀 물어봐도 될까?')
    (name, sex, ask) = tools.get_player_info()
    while ask != 'Yes':
        (name, sex, ask) = tools.get_player_info()
    tools.print2('\n(- ω -): 좋아, '+name+'이구나!')
    tools.print2('(- ω -): 이제 곧 게임을 시작할 건데 그러기 전에... \
    /(- ω -): 이것 저것 궁금한게 많지 않아?')
    Help.main()
    tools.print2('(- ω -): 나중에 궁금한게 또 생기면 일정을 정할 때 /(- ω -): menu라고 입력하면 다시 볼 수 있으니까 그 때 물어봐!')
    time.sleep(1)
    tools.print2('(- ω -): 자 그럼 '+name+'! \
    /(- ω -): 넌 앞으로 새롭게 시작하는거야.\
    /(- ω -): 이 공대생 생활을 보내면서 말이지.\
    /(- ω -): 6월 21일, 그러니까 종강 날까지 열심히 대학 생활을 보내면\
    /(- ω -): 그날까지 네가 보낸 나날의 결과로\
    /(- ω -): 너의 새로운 미래가 결정될거야.\
    /(- ω -): 자, 그럼 희망찬 나날을 시작해 볼까?')
    _=input('1) 응! 2) 그래!\n▷ ')
    tools.print2('(- ω -): 뭐, 사실은 어떤 걸 눌러도 시작 할 생각이었지만.')
    print('[대학 생활을 시작합니다.]')
    you = menu(name, sex)
    while  you.day < datetime.date(2017, 6, 21):
        you.select_schedule()
        you.run_schedule()
    you.ending_check()
    print('\n')
    AA.end()


while True:
    gamecode()